{"version":3,"sources":["components/ExpandSidebar.module.scss","assets/exit.jpg","serviceWorker.ts","shared/labels.ts","stores/CommonStore.ts","stores/UiPreferencesStore.ts","stores/UserStore.ts","utils/loggingUtils.ts","constants/loggingConstants.ts","stores/MazeViewStore.ts","stores/index.ts","stores/RootStore.ts","utils/colorUtils.ts","mazeGenComp/mazeUtils/mazeDefaults.ts","utils/storageUtils.ts","mazeGenComp/mazeUtils/MazeView.ts","shared/constants.ts","AppContext.ts","mazeGenComp/mazeUtils/mazeOptions.ts","mazeGenComp/mazeUtils/mazeOptionsSetter.ts","utils/routeUtils.ts","uiComponents/MazeOptionsUiExpansionPanel/ExpansionPanel.tsx","uiComponents/CellSizeSlider.tsx","uiComponents/MazeOptionsUiExpansionPanel/CellSizeSliderWrapper.tsx","shared/config.ts","shared/logger.ts","uiComponents/CellWallSizeSlider.tsx","uiComponents/MazeOptionsUiExpansionPanel/CellWallSizeSliderWrapper.tsx","uiComponents/MazeOptionsUiExpansionPanel/CellColorSelectWrapper.tsx","uiComponents/MazeOptionsUiExpansionPanel/CellWallColorSelectWrapper.tsx","uiComponents/MazeOptionsUiExpansionPanel/MazeBackgroundColorSelectWrapper.tsx","views/AppBarItems/InverseColorModeToggle.tsx","views/AppBarItems/Use3dModeToggle.tsx","uiComponents/FrameRateSlider.tsx","uiComponents/MazeOptionsUiExpansionPanel/NumberBasedSelections/FrameRateSliderWrapper.tsx","views/AppBarItems/AnimateMirrorToggle.tsx","views/AppBarItems/MazeGenCubeProjectionShowToggle.tsx","uiComponents/MazeOptionsUiExpansionPanel.tsx","components/ExpandSidebar.tsx","views/Header/Header.tsx","views/Home/Home.tsx","mazeGenComp/components/CellWallPoints.ts","mazeGenComp/components/Point.ts","utils/gridUtils.ts","mazeGenComp/mazeUtils/projectionUtils.ts","mazeGenComp/components/Cell/DrawDepthAnimation.ts","mazeGenComp/components/Cell/Cell.ts","mazeGenComp/MazeGenerator.ts","views/MazeContainer.tsx","api/models/UserDTO.ts","views/Login/LoginForm.tsx","graphql/fragments/userFragment.tsx","graphql/queries/me.tsx","views/Login/LoginView.tsx","errorHandler.js","AppRoutes.tsx","App.tsx","AppWrapper.tsx","index.tsx","views/Header/Header.module.scss"],"names":["module","exports","Boolean","window","location","hostname","match","Labels","CommonStore","store","this","UiPreferencesStore","observable","action","darkModeEnable","inverseColorMode","use3dMode","mazeOptionsIsOpen","animateMirror","UserStore","state","logger","message","MazeViewStore","mazeView","showGeneratorCubeProjection","value","percentOfCubeProjectionToShow","stores","uiPreferencesStore","mazeViewStore","routerStore","userStore","RouterStore","ColorUtils","colorString","colorStringArray","split","colorToReturn","Color","parseInt","a","invertColors","color","r","g","b","toString","mazeDefaultOptions","defaultBackgroundColor","defaultCellColor","defaultCellWallColor","defaultCellSize","defaultCellWallSize","defaultStrokeCapStyle","frameRate","maxPixelDepthToRenderProjection","use3d","mazeDefaultsStorageKeys","storageUtils","mazeOptions","localStorage","setItem","backgroundColor","cellColor","cellWallColor","cellSize","cellWallSize","cellWallStrokeCapStyle","colorUtils","getItem","fromStringToObj","MazeView","is3d","zValue","zoomHeightDiff","view","windowHeight","windowWidth","calculatedCellHeight","calculatedCellWidth","smallerSizeOfCellHeightWidth","aspectRatio","maxStrokeWidth","padding","numberOfColumns","numberOfRows","updateOptionsFromStorage","updateDynamicValues","innerHeight","innerWidth","addEventListener","event","wheelDelta","ratioFloat","parseFloat","toPrecision","Math","floor","P5_MazeContextInitialValue","mazeOptionsSetter","_mazeOptions","updateStorage","handleBackgroundColorChange","assignColorToTarget","rgb","handleCellColorChange","handleCellWallColorChange","assignmentColor","targetColor","handleCellSizeChange","size","handleCellWallWidthPercentChange","newValue","handleCellWallStyleChange","console","log","handleFrameRateChange","rate","p5_MazeFuncs","resetMaze","changeView","p5_MazeContext","React","createContext","MazeOptionsUiContextInitialValue","panelIsExpandedState","mazeBackgroundColor","cellWallStyle","mazeOptionsUiContext","APP_ROUTES","MAIN_MENU_OPTIONS","useStyles","makeStyles","theme","createStyles","root","width","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","ExpansionPanelWrapper","props","panel","panelIsExpanded","name","onPanelStateChange","render","useState","expanded","setExpanded","classes","ExpansionPanel","onChange","isExpanded","ExpansionPanelSummary","expandIcon","aria-controls","id","Typography","className","ExpansionPanelDetails","CellSizeSlider","onSizeChange","maxCellSize","input","setValue","setStateAndPersistSelection","valueForStorage","setStateConditionally","updateCellSizeForMaze","Grid","container","spacing","alignItems","item","xs","Slider","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","min","max","type","CellSizeSliderWrapper","mazeContextInstance","useContext","mazeOptionsUiContextInstance","CELL_SIZE","USE_LOGGER","process","REACT_APP_STATE","REACT_APP_API_ENDPOINT","REACT_APP_ADMIN_API_ENDPOINT","REACT_APP_USE_AUTH","trim","toLowerCase","REACT_APP_USE_LOGGER","logToConsole","CellWallSizeSlider","CellWallSizeSliderWrapper","mazeContext","CELL_WALL_SIZE","CellColorSelectWrapper","CELL_COLOR","CellWallColorSelectWrapper","CELL_WALL_COLOR","MazeBackgroundColorSelectWrapper","MAZE_BACKGROUND_COLOR","inject","observer","toggleInverseColorMode","row","FormControlLabel","control","Switch","checked","status","label","toggleUpdateUse3dMode","FrameRateSlider","onFrameChange","FrameRateSliderWrapper","FRAME_RATE","toggleAnimateMirror","changeShowGeneratorCubeProjection","toggleOptionsWrapper","display","flexDirection","HEADER","style","key","useMenuStyles","flexGrow","menuButton","marginRight","title","list","fullList","menuClassStyles","top","left","bottom","right","setState","toggleMazeOptionsIsOpen","toggleDrawer","side","open","sideList","role","onClick","onKeyDown","List","map","index","ListItem","button","ListItemIcon","ListItemText","primary","Divider","useEffect","styles","toggleMazeOptionsUi","toggleMazeOptionsUiButton","IconButton","aria-label","Button","SwipeableDrawer","transitionDuration","onClose","onOpen","anchor","HideOnScroll","children","trigger","useScrollTrigger","undefined","Slide","appear","direction","in","CssBaseline","AppBar","Toolbar","edge","to","LOGIN","NavLink","activeClassName","SelectedLink","toUpperCase","MAZE","ENABLE_FOLLOW_CELL_CREATOR","SAVE","Home","CellWallPoints","startPoint","endPoint","Point","x","y","getPointValsAtIndex","col","numColumns","numRows","getProjectionFor3D","point","x_value","y_value","xColPointValToDraw","offsetWidthBy3dProjection","yRowPointValToDraw","offsetHeightBy3dProjection","DrawDepthAnimation","_showWallIndicator","_p","_column","_cellWidth","_row","_cellHeight","drawWall","cellWallsWithDepthX","cellWallsWithDepthY","cellWallsWithDepthZ","xTranslate","yTranslate","push","fill","translate","box","pop","drawTop","drawRight","drawBottom","drawLeft","Cell","cellNumber","column","_padding","_img","walls","visited","lastVisitedState","shouldShow","neightbors","stackSubractorFromColor","paddingToApplyToLeft","paddingToApplyToTop","paddingToApplyToDepth","lastStackLength","numberOfIncreasesInStack","numberOfDecreasesInStack","potentialExitToMake","getColorBasedOnVisited","zTranslate","depthOffset","show","stackLength","newPoint","projectedXyPoint","divider","gValToApply","bValToApply","noStroke","STACK_TO_Z_CHANGE_RATIO","goDown","goUp","abs","drawProjectionOfCell","mirror","xOffset","yOffset","texture","rect","newStrokeWeight","strokeWeight","stroke","point1","point2","point3","point4","showWallIndicator","pointsToDrawWallBetween","_drawCellWalls","cellWallPoints","line","highlight","xLength","yLength","xyProjectedPoint","getRandomNeightborToVisit","grid","topNeightbor","rightNeightbor","bottomNeightbor","leftNeightbor","length","nextNeighborToVisit","random","Array","MazeGenerator","mazeIsActive","p","colIndBeingDrawn","rowIndBeingDrawn","stack","currentCell","cam","theShader","zoomValue","img","followMouse","depthOscillInc","sineOffsetForDepth","sineOffsetForDepthBound","sineOffsetInterval","viewRotation","currentCellNumber","numberOfCells","intervalForDisplayOfMetrics","numberOfFramesDrawn","logMetrics","mazeGenerationComplete","loggedMazeGenCompleteMetrics","startTime","endTime","runTime","setFrameRate","removeWalls","nextCell","horizontalDistance","verticalDistance","Date","loadImage","setup","createCanvas","WEBGL","rowNumber","columnNumber","cell","mouseClicked","numberOfEstimatedSeconds","estimatedMinutes","estimatedSeconds","estimatedRunTime","getTime","minutes","seconds","adjustedSeconds","draw","mouseX","mouseY","height","background","pointLight","directionalLight","angleMode","RADIANS","rotateX","PI","sin","normalizedMouseX","normalizedMouseY","increasing","sketchHandler","mazeSketch","mazeContainer","clearMaze","remove","rerunMaze","createMazeSketch","document","getElementById","attachEventHandlers","p5","onresize","UserDtoDefault","email","password","buttonGroupProps","orientation","buttonProps","fullWidth","LoginForm","defaultUserFormData","setName","setEmail","onSubmit","Container","fixed","noValidate","autoComplete","TextField","defaultValue","variant","required","ButtonGroup","userFragment","gql","meQuery","loginMutation","LoginView","update","cache","data","login","writeQuery","query","me","mutation","mutate","client","resetStore","variables","response","history","ACCOUNT","PureComponent","errorHandler","StackdriverErrorReporter","start","projectId","accountRoute","loginRoute","mazeRoute","broswerHistory","createBrowserHistory","syncHistoryWithStore","App","exact","path","report","component","MazeContainer","Component","ApolloClient","uri","credentials","AppWrapper","Provider","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2b7996e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggleMazeOptionsUi\":\"ExpandSidebar_toggleMazeOptionsUi__jSIC4\",\"toggleMazeOptionsUiButton\":\"ExpandSidebar_toggleMazeOptionsUiButton__3225Y\",\"SelectedLink\":\"ExpandSidebar_SelectedLink__2XSyD\"};","module.exports = __webpack_public_path__ + \"static/media/exit.4be8a418.jpg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export enum Labels {\r\n    HEADER = \"Maze Settings/Options\",\r\n    CELL_SIZE = \"Cell Size\",\r\n    CELL_WALL_SIZE = \"Cell Wall Width\",\r\n    CELL_COLOR = \"Cell Color\",\r\n    CELL_WALL_COLOR = \"Cell Wall Color\",\r\n    MAZE_BACKGROUND_COLOR = \"Maze Background Color\",\r\n    CELL_WALL_STYLE = \"Cell Wall Style\",\r\n    //Rendering\r\n    FRAME_RATE = \"Frame Rate\"\r\n}","import { RootStore } from './RootStore'\r\n\r\nexport class CommonStore {\r\n    protected store: RootStore;\r\n\r\n    constructor(store: RootStore) {\r\n        this.store = store\r\n    }\r\n}","import { action, decorate, observable } from 'mobx';\r\nimport { CommonStore } from \"./CommonStore\"\r\nimport { RootStore } from \"./RootStore\";\r\n\r\n//TODO add to presets or consts file\r\n\r\nexport const INVERSE_COLOR_DEFAULT_SETTING = false\r\nexport const DARK_MODE_DEFAULT_SETTING = false\r\n\r\nexport class UiPreferencesStore extends CommonStore {\r\n    constructor(store: RootStore) {\r\n        super(store);\r\n    }\r\n    //https://mobx.js.org/refguide/observable-decorator.html\r\n    @observable darkModeEnable: boolean = INVERSE_COLOR_DEFAULT_SETTING\r\n    @observable inverseColorMode: boolean = false\r\n    @observable use3dMode: boolean = true\r\n    @observable mazeOptionsIsOpen: boolean = false\r\n    @observable animateMirror: boolean = false\r\n\r\n    @action updateDarkModeEnabled = () => {\r\n        this.darkModeEnable = !this.darkModeEnable\r\n    }\r\n    @action toggleInverseColorMode = () => {\r\n        this.inverseColorMode = !this.inverseColorMode\r\n    }\r\n    @action toggleUpdateUse3dMode = () => {\r\n        this.use3dMode = !this.use3dMode\r\n    }\r\n    @action toggleMazeOptionsIsOpen = () => {\r\n        this.mazeOptionsIsOpen = !this.mazeOptionsIsOpen\r\n    }\r\n    @action toggleAnimateMirror = () => {\r\n        this.animateMirror = !this.animateMirror\r\n    }\r\n}\r\n\r\n//THIS pattern requires\r\n// \"emitDecoratorMetadata\": true,\r\n// \"experimentalDecorators\": true,\r\n//in tsconfig \r\n//TODO research if there's any implication in this decision - the above is easier to write\r\n//https://stackoverflow.com/questions/38271273/experimental-decorators-warning-in-typescript-compilation\r\n\r\n// decorate(UiPreferencesStore, {\r\n//     darkModeEnable: observable,\r\n//     inverseColorMode: observable,\r\n//     updateDarkModeEnabled: action,\r\n//     toggleInverseColorMode: action\r\n// })","import { action, decorate, observable } from 'mobx';\r\nimport { CommonStore } from \"./CommonStore\"\r\nimport { RootStore } from \"./RootStore\";\r\n\r\nexport class UserStore extends CommonStore {\r\n    constructor(store: RootStore) {\r\n        super(store);\r\n    }\r\n    //https://mobx.js.org/refguide/observable-decorator.html\r\n    @observable user: any | undefined \r\n\r\n    @action toggleInverseColorMode = (state: boolean) => {\r\n        // this.user = state\r\n    }\r\n}\r\n","import { LOG_VERBOSE } from \"../constants/loggingConstants\"\r\n\r\nexport const logger = (message: string) => {\r\n    if (LOG_VERBOSE) {\r\n        console.log(message)\r\n    }\r\n}\r\nexport const loggerJson = (obj: any) => {\r\n    if (LOG_VERBOSE) {\r\n        console.table(obj)\r\n    }\r\n}\r\nexport const loggerObj = (obj: any) => {\r\n    if (LOG_VERBOSE) {\r\n        console.log(obj)\r\n    }\r\n}\r\n\r\nexport const logRowDuringCreation = (row: number) => {\r\n    logger(`\r\n                    Iterating over rows\r\n                    Current row ${row}\r\n                    `)\r\n}\r\nexport const logColumnDuringCreation = (column: number) => {\r\n    logger(`\r\n                    Iterating over columns\r\n                    Current column ${column}\r\n                    `)\r\n}\r\nexport const logRowDuringDrawing = (row: number, index: number) => {\r\n    logger(`\r\n                Iterating over rows\r\n                Current row ${row}\r\n                Current row index ${index}\r\n                `)\r\n}\r\nexport const logColumnDuringDrawing = (column: number, index: number) => {\r\n    logger(`\r\n                Iterating over columns\r\n                Current column ${column}\r\n                Current column index ${index}\r\n                `)\r\n}\r\n\r\nexport const logVisitedCell = (col: number, row: number) => {\r\n    if (LOG_VERBOSE) {\r\n        console.log(`\r\n        VISITED\r\n        Column ${col}\r\n        Row ${row}\r\n        `)\r\n    }\r\n}","export const LOG_VERBOSE = false","import { action, observable } from 'mobx';\r\nimport { CommonStore } from \"./CommonStore\"\r\nimport { RootStore } from \"./RootStore\";\r\nimport { logger } from '../utils/loggingUtils';\r\n\r\nexport class MazeViewStore extends CommonStore {\r\n    constructor(store: RootStore) {\r\n        super(store);\r\n    }\r\n    @observable mazeView: number = 0\r\n    @observable showGeneratorCubeProjection: boolean = true\r\n    @observable percentOfCubeProjectionToShow: number = 10\r\n\r\n    @action changeView = () => {\r\n        this.mazeView++\r\n        logger(`Updated maze view to value: ${this.mazeView}`)\r\n    }\r\n    @action changeShowGeneratorCubeProjection = () => {\r\n        this.showGeneratorCubeProjection = !this.showGeneratorCubeProjection\r\n        logger(`Updated show Generator Cube Projection value: ${this.showGeneratorCubeProjection}`)\r\n    }\r\n    @action changePercentOfCubeProjectionToShow = (value: number) => {\r\n        this.percentOfCubeProjectionToShow = value\r\n        logger(`Updated percentOfCubeProjectionToShow with value: ${this.percentOfCubeProjectionToShow}`)\r\n    }\r\n}","import { RootStore } from './RootStore'\r\n\r\nexport const stores = new RootStore()","import { RouterStore } from 'mobx-react-router';\r\nimport { UiPreferencesStore } from './UiPreferencesStore';\r\nimport { UserStore } from './UserStore';\r\nimport { MazeViewStore } from './MazeViewStore';\r\n\r\nexport class RootStore {\r\n    uiPreferencesStore: UiPreferencesStore\r\n    mazeViewStore: MazeViewStore\r\n    routerStore: RouterStore\r\n    userStore: UserStore\r\n    constructor() {\r\n        this.routerStore = new RouterStore()\r\n        this.uiPreferencesStore = new UiPreferencesStore(this)\r\n        this.mazeViewStore = new MazeViewStore(this)\r\n        this.userStore = new UserStore(this)\r\n    }\r\n}\r\n","import { RegexExecReturnValObj } from \"./regexTypes\";\r\n\r\nexport const RGB_COLOR_REGEX = /\\((\\d+),\\s*(\\d+),\\s*(\\d+)(,\\s*(\\d*.\\d*))?\\)/;\r\n\r\nconst COLOR_STRING_DELIMITER = \":\"\r\n//Singleton for static class\r\n// export const ColorUtils = function () {\r\n//     return {\r\n//         FromStringToObj : (colorString: string): Color => {\r\n//             let colorStringArray = colorString.split(COLOR_STRING_DELIMITER)\r\n//             let colorToReturn = new Color(\r\n//                 parseInt(colorStringArray[0]),\r\n//                 parseInt(colorStringArray[1]),\r\n//                 parseInt(colorStringArray[2]),\r\n//             )\r\n//             let a = parseInt(colorStringArray[3])\r\n//             //a is optional\r\n//             if (a) {\r\n//                 colorToReturn.a = a\r\n//             }\r\n//             return colorToReturn\r\n//         }\r\n//     }\r\n// }()\r\n//isn't the above syntactic sugar for this\r\nexport class ColorUtils {\r\n    public fromStringToObj(colorString: string): Color {\r\n        let colorStringArray = colorString.split(COLOR_STRING_DELIMITER)\r\n        let colorToReturn = new Color(\r\n            parseInt(colorStringArray[0]),\r\n            parseInt(colorStringArray[1]),\r\n            parseInt(colorStringArray[2]),\r\n        )\r\n        let a = parseInt(colorStringArray[3])\r\n        //a is optional\r\n        if (a) {\r\n            colorToReturn.a = a\r\n        }\r\n        return colorToReturn\r\n    }\r\n}\r\n\r\nexport const invertColors = (color: Color) => {\r\n    return new Color(\r\n        255 - color.r,\r\n        255 - color.g,\r\n        255 - color.b,\r\n    )\r\n}\r\n\r\nexport class Color {\r\n    // public r?: number;\r\n    // public g?: number;\r\n    // public b?: number;\r\n    // public a?: number;\r\n\r\n    // constructor()\r\n    // constructor(colorStr?: string)\r\n    // constructor(r?: string | number, g?: number, b?: number)\r\n    // constructor(public r?: string | number, g?: number, b?: number, a?: number) {\r\n    constructor(\r\n        public r: number,\r\n        public g: number,\r\n        public b: number,\r\n        public a?: number\r\n    ) {\r\n        // if (typeof r === 'string') {\r\n        //     r = r.trim();\r\n        //     if (r.indexOf('#') === 0) {\r\n        //         r = r.substr(r.indexOf('#') + 1);\r\n        //         this.r = parseInt(r.substr(0, 2), 16);\r\n        //         this.g = parseInt(r.substr(2, 2), 16);\r\n        //         this.b = parseInt(r.substr(4, 2), 16);\r\n        //     } else if (r.indexOf('rgb') === 0) {\r\n        //         //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\r\n        //         const res = RGB_COLOR_REGEX.exec(r);\r\n        //         if (res) {\r\n        //             this.r = parseInt(res[1], 10);\r\n        //             this.g = parseInt(res[2], 10);\r\n        //             this.b = parseInt(res[3], 10);\r\n        //             this.a = res[5] ? parseFloat(res[5]) : 1;\r\n        //         }\r\n        //     }\r\n        // } else {\r\n        //     this.r = r;\r\n        //     this.g = g;\r\n        //     this.b = b;\r\n        //     this.a = a || 1;\r\n        // }\r\n    }\r\n\r\n    toHex() {\r\n        return `\r\n        #${this.r ? this.r.toString(16) : \"\"}${this.g ? this.g.toString(16) : \"\"}${this.b ? this.b.toString(16) : \"\"}\r\n        `\r\n    }\r\n\r\n    toRgb() {\r\n        return `rgb(${this.r}, ${this.g}, ${this.b})`;\r\n    }\r\n\r\n    toRgba() {\r\n        return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\r\n\r\n    }\r\n    toString() {\r\n        return `${this.r}${COLOR_STRING_DELIMITER}${this.g}${COLOR_STRING_DELIMITER}${this.b}${COLOR_STRING_DELIMITER}${this.a ? this.a : \"\"}`\r\n    }\r\n}\r\n","import { Color } from \"../../utils/colorUtils\"\r\n\r\n//SET DEFAULT COLORS FOR MAZE\r\nexport const mazeDefaultOptions: MazeDefaultOptions = {\r\n    //SCENE\r\n    defaultBackgroundColor: new Color(113,173,245,1),\r\n    //CELL COLOR\r\n    defaultCellColor: new Color(65,117,5,1),\r\n    defaultCellWallColor: new Color(255, 255, 255, 100),\r\n    //CELL SIZE\r\n    defaultCellSize: 40,\r\n    defaultCellWallSize: 1,\r\n    //CELL WALL SHAPE\r\n    defaultStrokeCapStyle: \"ROUND\",\r\n    //Rendering\r\n    frameRate: 40,\r\n    maxPixelDepthToRenderProjection: 100,\r\n    //Render Type\r\n    use3d: true,\r\n}\r\nexport interface MazeDefaultOptions {\r\n\r\n    defaultBackgroundColor: Color,\r\n    //CELL COLOR\r\n    defaultCellColor: Color,\r\n    defaultCellWallColor: Color,\r\n    //CELL Size\r\n    defaultCellSize: number,\r\n    defaultCellWallSize: number,\r\n    //CELL WALL SHAPE\r\n    defaultStrokeCapStyle: string,\r\n    //Rendering\r\n    frameRate: number,\r\n    maxPixelDepthToRenderProjection: number,\r\n    //Render Type\r\n    use3d: boolean\r\n}\r\n","import { MazeOptions } from \"../mazeGenComp/mazeUtils/mazeOptions\"\r\nimport { ColorUtils } from \"./colorUtils\"\r\nimport { mazeDefaultOptions } from \"../mazeGenComp/mazeUtils/mazeDefaults\"\r\nimport { cpus } from \"os\"\r\nimport { Color } from \"p5\"\r\n\r\n//set up keys for local storage\r\n\r\nexport const mazeDefaultsStorageKeys = {\r\n    //SCENE\r\n    backgroundColorKey: \"backgroundColorKey\",\r\n    //CELL COLORS\r\n    cellColorKey: \"cellColorKey\",\r\n    cellWallColorKey: \"cellWallColorKey\",\r\n    //CELL SIZES\r\n    cellSizeKey: \"cellSizeKey\",\r\n    cellWallSizeKey: \"cellWallSizeKey\",\r\n    //CELL WALL SHAPE\r\n    cellWallStrokeCapStyleKey: \"cellWallStrokeCapStyleKey\",\r\n    //Render\r\n    frameRateKey: \"frameRateKey\"\r\n}\r\n\r\n\r\nexport const storageUtils = {\r\n\r\n    setMazeoptionsInStorage: (mazeOptions: MazeOptions) => {\r\n        //BACKGROUND\r\n        localStorage.setItem(mazeDefaultsStorageKeys.backgroundColorKey, mazeOptions.backgroundColor.toString())\r\n        //CELL COLOR\r\n        localStorage.setItem(mazeDefaultsStorageKeys.cellColorKey, mazeOptions.cellColor.toString())\r\n        localStorage.setItem(mazeDefaultsStorageKeys.cellWallColorKey, mazeOptions.cellWallColor.toString())\r\n        //CELL SHAPE\r\n        localStorage.setItem(mazeDefaultsStorageKeys.cellSizeKey, mazeOptions.cellSize.toString())\r\n        localStorage.setItem(mazeDefaultsStorageKeys.cellWallSizeKey, mazeOptions.cellWallSize.toString())\r\n        //CELL SHAPE STYLE\r\n        localStorage.setItem(mazeDefaultsStorageKeys.cellWallStrokeCapStyleKey, mazeOptions.cellWallStrokeCapStyle)\r\n        //Frame Rate\r\n        localStorage.setItem(mazeDefaultsStorageKeys.frameRateKey, mazeOptions.frameRate.toString())\r\n\r\n    },\r\n    updateMazeOptionsFromStorage: (mazeOptions: MazeOptions) => {\r\n        let colorUtils = new ColorUtils()\r\n\r\n        //BACKGROUND\r\n        let backgroundColor = localStorage.getItem(mazeDefaultsStorageKeys.backgroundColorKey)\r\n        //CELL COLOR\r\n        let cellColor = localStorage.getItem(mazeDefaultsStorageKeys.cellColorKey)\r\n        let cellWallColor = localStorage.getItem(mazeDefaultsStorageKeys.cellWallColorKey)\r\n        //CELL SHAPE\r\n        let cellSize = localStorage.getItem(mazeDefaultsStorageKeys.cellSizeKey)\r\n        let cellWallSize = localStorage.getItem(mazeDefaultsStorageKeys.cellWallSizeKey)\r\n        //CELL SHAPE STYLE\r\n        let cellWallStrokeCapStyle = localStorage.getItem(mazeDefaultsStorageKeys.cellWallStrokeCapStyleKey)\r\n        //Render\r\n        let frameRate = localStorage.getItem(mazeDefaultsStorageKeys.frameRateKey)\r\n\r\n\r\n        //BACKGROUND\r\n        mazeOptions.backgroundColor = colorUtils.fromStringToObj(\r\n            backgroundColor ? backgroundColor : mazeDefaultOptions.defaultBackgroundColor.toString()\r\n        )\r\n        //TODO Use defaults class to construct color strings and set util func for that\r\n        //CELL COLOR\r\n        mazeOptions.cellColor = colorUtils.fromStringToObj(cellColor ? cellColor : mazeDefaultOptions.defaultCellColor.toString())\r\n        mazeOptions.cellWallColor = colorUtils.fromStringToObj(cellWallColor ? cellWallColor : mazeDefaultOptions.defaultCellWallColor.toString())\r\n        //CELL SHAPE\r\n        mazeOptions.cellSize = parseInt(cellSize ? cellSize : `${mazeDefaultOptions.defaultCellSize}`)\r\n        mazeOptions.cellWallSize = parseInt(cellWallSize ? cellWallSize : `${mazeDefaultOptions.defaultCellWallSize}`)\r\n        //CELL SHAPE STYLE\r\n        mazeOptions.cellWallStrokeCapStyle = cellWallStrokeCapStyle ? cellWallStrokeCapStyle : `${mazeDefaultOptions.defaultStrokeCapStyle}`\r\n        //Render\r\n        mazeOptions.frameRate = parseInt(frameRate ? frameRate : `${mazeDefaultOptions.frameRate}`)\r\n    }\r\n}\r\n","import { DEFAULT_Z_DISTANCE } from \"../../shared/constants\";\r\n\r\nexport class MazeView {\r\n    constructor(\r\n        public is3d: boolean = true,\r\n        public zValue: number =  0,\r\n        public zoomHeightDiff = DEFAULT_Z_DISTANCE\r\n\r\n    ){\r\n\r\n    }\r\n}","import { mazeDefaultOptions } from \"../mazeGenComp/mazeUtils/mazeDefaults\"\r\n\r\nexport const CELL_MIN_SIZE = 3\r\nexport const CELL_SIZE_INCREMENT_INTERVAL = 1\r\n\r\n//DYNAMIC CALCULATION INPUT CONSTS\r\nexport const MIN_NUMBER_OF_CELLS_HORIZONTALLY = 9\r\n\r\n//3D Related\r\nexport const DEFAULT_Z_DISTANCE = 300\r\nexport const ZOOM_MULTIPLIER_DEFAULT = 150\r\nexport const CELL_WALL_WITH_DEPTH_Z_VALUE = mazeDefaultOptions.defaultCellSize / 2","\r\nimport React from 'react'\r\nimport { MazeOptions } from './mazeGenComp/mazeUtils/mazeOptions';\r\nimport { MazeOptionsSetter } from './mazeGenComp/mazeUtils/mazeOptionsSetter';\r\n\r\nexport interface P5_MazeContext {\r\n    mazeOptions: MazeOptions;\r\n    mazeOptionsSetter: MazeOptionsSetter;\r\n    mazeSketch?: p5,\r\n    p5_MazeFuncs: P5_MazeFuncs\r\n}\r\nexport interface P5_MazeFuncs {\r\n    resetMaze: Function,\r\n    changeView: Function,\r\n}\r\nlet mazeOptions = new MazeOptions();\r\nlet mazeOptionsSetter = new MazeOptionsSetter(mazeOptions);\r\nexport const P5_MazeContextInitialValue: P5_MazeContext = {\r\n    mazeOptions,\r\n    mazeOptionsSetter,\r\n    p5_MazeFuncs: {\r\n        resetMaze: () => { },\r\n        changeView: () => { }\r\n    }\r\n}\r\n\r\nexport const p5_MazeContext = React.createContext(P5_MazeContextInitialValue)\r\n\r\ninterface PanelIsExpandedState {\r\n    cellSize: boolean;\r\n    cellWallSize: boolean;\r\n    cellColor: boolean;\r\n    cellWallColor: boolean;\r\n    mazeBackgroundColor: boolean;\r\n    cellWallStyle: boolean;\r\n    frameRate: boolean;\r\n}\r\nconst panelIsExpandedState: PanelIsExpandedState = {\r\n    cellSize: true,\r\n    cellWallSize: false,\r\n    cellColor: true,\r\n    cellWallColor: false,\r\n    mazeBackgroundColor: false,\r\n    cellWallStyle: true,\r\n    frameRate: false\r\n}\r\nexport interface MazeOptionsUiContext {\r\n    panelIsExpandedState: PanelIsExpandedState\r\n}\r\nexport const MazeOptionsUiContextInitialValue: MazeOptionsUiContext = {\r\n    panelIsExpandedState\r\n}\r\n\r\n\r\nexport const mazeOptionsUiContext = React.createContext(MazeOptionsUiContextInitialValue)","\r\nimport { Color } from \"../../utils/colorUtils\"\r\nimport { mazeDefaultOptions } from \"./mazeDefaults\";\r\nimport { storageUtils } from \"../../utils/storageUtils\";\r\nimport { MazeView } from \"./MazeView\";\r\nimport { MIN_NUMBER_OF_CELLS_HORIZONTALLY, DEFAULT_Z_DISTANCE, ZOOM_MULTIPLIER_DEFAULT } from \"../../shared/constants\";\r\n\r\nexport class MazeOptions {\r\n    view: MazeView = new MazeView();\r\n    //DYNAMIC SECTION\r\n    //Window \r\n    windowHeight: number;\r\n    windowWidth: number;\r\n    calculatedCellHeight: number = 1;\r\n    calculatedCellWidth: number = 1;\r\n    smallerSizeOfCellHeightWidth: number = 1\r\n    aspectRatio: number = 1;\r\n    maxStrokeWidth: number = 1\r\n    padding: number = 1;\r\n    numberOfColumns: number = 10;\r\n    numberOfRows: number = 10;\r\n    //rendering\r\n    constructor(\r\n        //SCENE\r\n        public backgroundColor: Color = mazeDefaultOptions.defaultBackgroundColor,\r\n        //CELL COLOR,\r\n        public cellColor: Color = mazeDefaultOptions.defaultCellColor,\r\n        public cellWallColor : Color= mazeDefaultOptions.defaultCellWallColor,\r\n        //CELL SIZE,\r\n        public cellSize : number = mazeDefaultOptions.defaultCellSize,\r\n        public cellWallSize : number = mazeDefaultOptions.defaultCellWallSize,\r\n        //CELL WALL SHAPE,\r\n        public cellWallStrokeCapStyle: string = mazeDefaultOptions.defaultStrokeCapStyle,\r\n        //RENDER\r\n        public frameRate: number = mazeDefaultOptions.frameRate,\r\n        public maxPixelDepthToRenderProjection: number = mazeDefaultOptions.maxPixelDepthToRenderProjection,\r\n        //RENDER TYPE\r\n        public use3d: boolean = mazeDefaultOptions.use3d,\r\n        \r\n    ) {\r\n        //SET UP DEFAULTS FOR MAZE if not using storage\r\n        //SCENE\r\n        //Update any options that were persisted in storage\r\n        this.updateOptionsFromStorage()\r\n        this.updateDynamicValues()\r\n        //Set UI Vars\r\n        //TODO Move to header constants\r\n        this.windowHeight = window.innerHeight;\r\n        this.windowWidth = window.innerWidth;\r\n        window.addEventListener(\"wheel\", (event: any) => {\r\n            const minZoomSetting = 0\r\n            let userIsZoomingIn = event.wheelDelta > 0\r\n            if (userIsZoomingIn && this.view.zValue < minZoomSetting) {\r\n                this.view.zValue += ZOOM_MULTIPLIER_DEFAULT\r\n            } else {\r\n                this.view.zValue -= ZOOM_MULTIPLIER_DEFAULT\r\n            }\r\n            this.view.zoomHeightDiff = this.windowHeight - this.view.zValue\r\n        })\r\n\r\n    }\r\n    saveOptionsToStorage() {\r\n        storageUtils.setMazeoptionsInStorage(this)\r\n    }\r\n    updateOptionsFromStorage() {\r\n        storageUtils.updateMazeOptionsFromStorage(this)\r\n    }\r\n    updateDynamicValues() {\r\n        //DYNAMIC OPTIONS CALC\r\n        if (this.maxStrokeWidth > this.cellSize) {\r\n            this.maxStrokeWidth = this.cellSize\r\n        }\r\n        let ratioFloat = this.windowWidth / this.windowHeight\r\n        this.aspectRatio = parseFloat(ratioFloat.toPrecision(5))\r\n        if (this.aspectRatio > 1.0) {\r\n            this.calculatedCellWidth = this.aspectRatio * this.cellSize\r\n            this.calculatedCellHeight = 1 * this.cellSize\r\n        } else {\r\n            this.calculatedCellWidth = 1 * this.cellSize\r\n            this.calculatedCellHeight = (1 / this.aspectRatio) * this.cellSize\r\n        }\r\n        //calculate stroke width base on either width or height\r\n        this.smallerSizeOfCellHeightWidth = this.calculatedCellHeight > this.calculatedCellWidth ? this.calculatedCellWidth : this.calculatedCellHeight\r\n        this.maxStrokeWidth = this.smallerSizeOfCellHeightWidth / 2;\r\n        //set up number of columns and numberOfRows based on the canvas pixel size and the cell this.windowWidth constants\r\n        this.numberOfColumns = Math.floor(this.windowWidth / this.calculatedCellWidth)\r\n        this.numberOfRows = Math.floor(this.windowHeight / this.calculatedCellHeight)\r\n        // console.log(`MAZE OPTIONS`)\r\n        // console.log(this)\r\n        this.padding = .3 * this.cellSize\r\n        this.maxPixelDepthToRenderProjection = this.numberOfRows * this.cellSize / 10\r\n\r\n        //THIS Was a bad idea \r\n        // this.padding = Math.floor(this.windowWidth % this.calculatedCellWidth)\r\n    }\r\n}","import { MazeOptions } from \"./mazeOptions\"\r\nimport { mazeDefaultsStorageKeys, storageUtils } from \"../../utils/storageUtils\"\r\nimport { Color } from \"../../utils/colorUtils\"\r\nimport { logger } from \"../../utils/loggingUtils\"\r\n\r\nexport class MazeOptionsSetter {\r\n    constructor(private _mazeOptions: MazeOptions) {\r\n\r\n    }\r\n    //TODO Move to color utils class\r\n    //SET UP HANDLERS FOR COLOR CHANGE\r\n    updateStorage = () => {\r\n        //todo set up individual setters for options\r\n        storageUtils.setMazeoptionsInStorage(this._mazeOptions)\r\n    }\r\n    handleBackgroundColorChange = (color: any): void => {\r\n        this.assignColorToTarget(color.rgb, this._mazeOptions.backgroundColor)\r\n        this.updateStorage()\r\n    }\r\n    handleCellColorChange = (color: any): void => {\r\n        this.assignColorToTarget(color.rgb, this._mazeOptions.cellColor)\r\n        this.updateStorage()\r\n    }\r\n    handleCellWallColorChange = (color: any): void => {\r\n        this.assignColorToTarget(color.rgb, this._mazeOptions.cellWallColor)\r\n        this.updateStorage()\r\n    }\r\n    assignColorToTarget = (assignmentColor: Color, targetColor: Color) => {\r\n        const { r, g, b, a } = assignmentColor\r\n        targetColor.r = r\r\n        targetColor.g = g\r\n        targetColor.b = b\r\n        //TODO FIGURE OUT WHY SENDING A TO P5 CAUSES ODD THINGS TO HAPPEN\r\n        // if (a) {\r\n        //   this._mazeOptions.cellColor.a = a\r\n        // }\r\n        // if (a) {\r\n        //     targetColor.a = a\r\n        // }\r\n    }\r\n    handleCellSizeChange = (size: number) => {\r\n        this._mazeOptions.cellSize = size\r\n        localStorage.setItem(mazeDefaultsStorageKeys.cellSizeKey, size.toString())\r\n        logger(`New cell width is ${this._mazeOptions.cellSize}`)\r\n    }\r\n\r\n\r\n    handleCellWallWidthPercentChange = (newValue: number) => {\r\n        this._mazeOptions.cellWallSize = newValue\r\n        this._mazeOptions.updateDynamicValues()\r\n        localStorage.setItem(mazeDefaultsStorageKeys.cellWallSizeKey, newValue.toString())\r\n        logger(`New cell wall width percent is ${this._mazeOptions.cellWallSize}`)\r\n    }\r\n    handleCellWallStyleChange = (newValue: string) => {\r\n        this._mazeOptions.cellWallStrokeCapStyle = newValue\r\n        localStorage.setItem(mazeDefaultsStorageKeys.cellWallStrokeCapStyleKey, newValue)\r\n        console.log(`New cell wall style is ${this._mazeOptions.cellWallStrokeCapStyle}`)\r\n        //TODO Change console.logs to logger\r\n        // logger(\r\n        //   );\r\n\r\n    }\r\n    handleFrameRateChange = (rate: number) => {\r\n        this._mazeOptions.frameRate = Math.floor(rate)\r\n        localStorage.setItem(mazeDefaultsStorageKeys.frameRateKey, rate.toString())\r\n        logger(`New frame rate is ${this._mazeOptions.cellSize}`)\r\n    }\r\n}","export enum APP_ROUTES {\r\n    ACCOUNT = \"account\",\r\n    LOGIN = \"login\",\r\n    MAZE = \"new maze\",\r\n\r\n}\r\n\r\nexport enum MAIN_MENU_OPTIONS {\r\n    ENABLE_FOLLOW_CELL_CREATOR = \"View\",\r\n    SAVE = \"Save\"\r\n}","import React, { useState, FunctionComponent } from \"react\";\r\n\r\nimport { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\r\n\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\ninterface ExpansionPanelWrapperProps {\r\n  name: string;\r\n  panelIsExpanded: boolean;\r\n  children?: FunctionComponent<any>;\r\n  onPanelStateChange?: Function;\r\n  render?: any\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\"\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      flexBasis: \"33.33%\",\r\n      flexShrink: 0\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary\r\n      },\r\n  })\r\n);\r\n\r\nexport const ExpansionPanelWrapper = (props: ExpansionPanelWrapperProps) => {\r\n  const { panelIsExpanded, name, onPanelStateChange, render = () => {} } = props;\r\n  const [expanded, setExpanded] = useState<string | false | true>(panelIsExpanded === true ? name : false);\r\n  const classes = useStyles();\r\n  const handleChange = (panel: string) => (\r\n    event: React.ChangeEvent<{}>,\r\n    isExpanded: boolean\r\n  ) => {\r\n    if (onPanelStateChange) {\r\n      onPanelStateChange();\r\n    }\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  return (\r\n    <ExpansionPanel expanded={expanded === name} onChange={handleChange(name)}>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1bh-content\"\r\n        id=\"panel1bh-header\"\r\n      >\r\n        <Typography className={classes.secondaryHeading}>{name}</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>{render()}</ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormatSize from \"@material-ui/icons/FormatSize\";\r\n\r\n//Maze Config\r\nimport { MazeOptionsSetter } from \"../mazeGenComp/mazeUtils/mazeOptionsSetter\";\r\nimport { CELL_MIN_SIZE, MIN_NUMBER_OF_CELLS_HORIZONTALLY, CELL_SIZE_INCREMENT_INTERVAL } from \"../shared/constants\";\r\n\r\nexport interface CellSizeSliderProps {\r\n  mazeOptionsSetter: MazeOptionsSetter;\r\n  onSizeChange: Function;\r\n  cellSize: number;\r\n  windowWidth: number\r\n\r\n}\r\n\r\nconst CellSizeSlider = (props: CellSizeSliderProps) => {\r\n  const { mazeOptionsSetter, windowWidth, cellSize, onSizeChange } = props!;\r\n  //cell width rules\r\n  let maxCellSize = windowWidth / MIN_NUMBER_OF_CELLS_HORIZONTALLY;\r\n  let cellSizeIncrementor = CELL_SIZE_INCREMENT_INTERVAL;\r\n\r\n  //create ui component\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      width: 200\r\n    },\r\n    input: {\r\n      width: 42\r\n    }\r\n  });\r\n  const classes = useStyles();\r\n\r\n  //Set up state for slider\r\n  const [value, setValue] = React.useState(cellSize);\r\n\r\n  //Event for slider\r\n  const handleSliderChange = (event: any, newValue: any) => {\r\n    setStateAndPersistSelection(newValue);\r\n  };\r\n  //Even for input\r\n  const handleInputChange = (event: any) => {\r\n    let newValue =\r\n      event.target.value === \"\" ? CELL_MIN_SIZE : Number(event.target.value);\r\n    setStateAndPersistSelection(newValue);\r\n  };\r\n  const setStateAndPersistSelection = (newValue: number) => {\r\n    let valueForStorage = setStateConditionally(newValue);\r\n    updateCellSizeForMaze(valueForStorage);\r\n  };\r\n  const updateCellSizeForMaze = (newValue: number) => {\r\n    mazeOptionsSetter.handleCellSizeChange(newValue);\r\n    onSizeChange();\r\n  };\r\n\r\n  //state change\r\n\r\n  const handleBlur = () => {\r\n    setStateConditionally(value);\r\n  };\r\n  const setStateConditionally = (value: number): number => {\r\n    if (value < CELL_MIN_SIZE) {\r\n      setValue(CELL_MIN_SIZE);\r\n      return CELL_MIN_SIZE;\r\n    } else if (value > maxCellSize) {\r\n      setValue(maxCellSize);\r\n      return maxCellSize;\r\n    } else {\r\n      setValue(value);\r\n      return value;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item>\r\n          <FormatSize />\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider\r\n            value={typeof value === \"number\" ? value : CELL_MIN_SIZE}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Input\r\n            className={classes.input}\r\n            value={value}\r\n            margin=\"dense\"\r\n            onChange={handleInputChange}\r\n            onBlur={handleBlur}\r\n            inputProps={{\r\n              step: cellSizeIncrementor,\r\n              min: CELL_MIN_SIZE,\r\n              max: maxCellSize,\r\n              type: \"number\",\r\n              \"aria-labelledby\": \"input-slider\"\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default CellSizeSlider;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  p5_MazeContext,\r\n  P5_MazeContext,\r\n  mazeOptionsUiContext,\r\n  MazeOptionsUiContext\r\n} from \"../../AppContext\";\r\nimport { ExpansionPanelWrapper } from \"./ExpansionPanel\";\r\nimport CellSizeSlider from \"../CellSizeSlider\";\r\nimport { Labels } from \"../../shared/labels\";\r\n\r\nexport const CellSizeSliderWrapper = () => {\r\n  let mazeContextInstance: P5_MazeContext = useContext(p5_MazeContext);\r\n  let mazeOptionsUiContextInstance: MazeOptionsUiContext = useContext(\r\n    mazeOptionsUiContext\r\n  );\r\n  const { mazeOptionsSetter, mazeOptions, p5_MazeFuncs } = mazeContextInstance;\r\n  const {panelIsExpandedState} = mazeOptionsUiContextInstance\r\n  const { resetMaze } = p5_MazeFuncs;\r\n  return (\r\n    <ExpansionPanelWrapper\r\n      name={Labels.CELL_SIZE}\r\n      panelIsExpanded={panelIsExpandedState.cellSize}\r\n      render={() => (\r\n        <CellSizeSlider\r\n          mazeOptionsSetter={mazeOptionsSetter}\r\n          onSizeChange={resetMaze}\r\n          windowWidth={mazeOptions.windowWidth}\r\n          cellSize={mazeOptions.cellSize}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n","export const ENV = process.env.NODE_ENV;\r\nexport const STATE = process.env.REACT_APP_STATE;\r\n\r\nexport const DATA_API_URL: string = process.env.REACT_APP_API_ENDPOINT || '';\r\nexport const APP_API_URL: string = process.env.REACT_APP_ADMIN_API_ENDPOINT || '';\r\n\r\nexport const USE_AUTH: boolean = (process.env.REACT_APP_USE_AUTH || 'true').trim().toLowerCase() === 'true';\r\nexport const USE_LOGGER: boolean = (process.env.REACT_APP_USE_LOGGER || '').trim().toLowerCase() === 'true';","import { USE_LOGGER } from './config';\r\n\r\n//temp logger\r\nexport const logToConsole = (message: string) => {\r\n  if (USE_LOGGER) {\r\n    console.log(message)\r\n  }\r\n};\r\n\r\nexport const logObjToConsole = (obj: any) => {\r\n  if (USE_LOGGER) {\r\n    console.log(obj)\r\n  }\r\n};\r\n\r\nexport const logEnvVariables = () => {\r\n  logToConsole(`\r\n    ENVIORENTMENT VARIABLES:\r\n    NODE_ENV:                             [${ process.env.NODE_ENV}]\r\n    REACT_APP_ENV :                       [${process.env.REACT_APP_ENV}]\r\n    REACT_APP_SHOULD_LOG :                [${process.env.REACT_APP_SHOULD_LOG}]\r\n    REACT_APP_USE_LOGGER :                [${process.env.REACT_APP_USE_LOGGER}]\r\n    REACT_APP_API_ENDPOINT :              [${process.env.REACT_APP_API_ENDPOINT}]\r\n    REACT_APP_ADMIN_API_ENDPOINT :        [${process.env.REACT_APP_ADMIN_API_ENDPOINT}]\r\n    REACT_APP_USE_AUTH :                  [${process.env.REACT_APP_USE_AUTH}]\r\n\r\n\r\n  `);\r\n};","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormatSize from \"@material-ui/icons/FormatSize\";\r\n\r\n//Maze Config\r\nimport { MazeOptionsSetter } from \"../mazeGenComp/mazeUtils/mazeOptionsSetter\";\r\nimport { Labels } from \"../shared/labels\";\r\nimport { logToConsole } from \"../shared/logger\";\r\n\r\ninterface CellWallSizeSlider {\r\n  mazeOptionsSetter: MazeOptionsSetter;\r\n  cellWallSize: number;\r\n  maxStrokeWidth: number;\r\n}\r\n\r\nconst CellWallSizeSlider = (props: CellWallSizeSlider) => {\r\n  const { mazeOptionsSetter, cellWallSize, maxStrokeWidth } = props;\r\n  let minStrokeWidth = 1;\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      width: 200\r\n    },\r\n    input: {\r\n      width: 42\r\n    }\r\n  });\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(cellWallSize);\r\n\r\n  const handleSliderChange = (event: any, newValue: any) => {\r\n    setStateAndPersistSelection(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event: any) => {\r\n    let newValue =\r\n      event.target.value === \"\" ? minStrokeWidth : Number(event.target.value);\r\n    setStateAndPersistSelection(newValue);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    setStateAndPersistSelection(value);\r\n  };\r\n\r\n  const setStateAndPersistSelection = (newValue: number) => {\r\n    let valueForStorage = setStateConditionally(newValue);\r\n    mazeOptionsSetter.handleCellWallWidthPercentChange(valueForStorage);\r\n  };\r\n  const setStateConditionally = (newValue: number) => {\r\n    if (newValue < minStrokeWidth) {\r\n      setValue(minStrokeWidth);\r\n      return minStrokeWidth;\r\n    } else if (newValue > maxStrokeWidth) {\r\n      setValue(maxStrokeWidth);\r\n      return maxStrokeWidth;\r\n    } else {\r\n      setValue(newValue);\r\n      return newValue;\r\n    }\r\n  };\r\n\r\n  logToConsole(`\r\n    Cell Wall Size Slider render with props:\r\n    minStrokeWidth ${minStrokeWidth}\r\n    maxStrokeWidth ${maxStrokeWidth}\r\n    cellWallSize ${value}\r\n  `);\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item>\r\n          <FormatSize />\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider\r\n            value={typeof value === \"number\" ? value : minStrokeWidth}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Input\r\n            className={classes.input}\r\n            value={value}\r\n            margin=\"dense\"\r\n            onChange={handleInputChange}\r\n            onBlur={handleBlur}\r\n            inputProps={{\r\n              step: 1,\r\n              min: minStrokeWidth,\r\n              max: maxStrokeWidth,\r\n              type: \"number\",\r\n              \"aria-labelledby\": \"input-slider\"\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default CellWallSizeSlider;\r\n","import React, { useContext } from \"react\";\r\nimport { p5_MazeContext, P5_MazeContext, mazeOptionsUiContext, MazeOptionsUiContext } from \"../../AppContext\";\r\nimport { ExpansionPanelWrapper } from \"./ExpansionPanel\";\r\nimport { Labels } from \"../../shared/labels\";\r\nimport CellWallSizeSlider from \"../CellWallSizeSlider\";\r\n\r\nexport const CellWallSizeSliderWrapper = () => {\r\n  let mazeContext: P5_MazeContext = useContext(p5_MazeContext);\r\n  let mazeOptionsUiContextInstance: MazeOptionsUiContext = useContext(\r\n    mazeOptionsUiContext\r\n  );\r\n  const { panelIsExpandedState } = mazeOptionsUiContextInstance;\r\n  const { mazeOptionsSetter, mazeOptions } = mazeContext;\r\n  return (\r\n    <ExpansionPanelWrapper\r\n    panelIsExpanded={panelIsExpandedState.cellWallSize}\r\n      name={Labels.CELL_WALL_SIZE}\r\n      render={() => (\r\n        <CellWallSizeSlider\r\n          mazeOptionsSetter={mazeOptionsSetter}\r\n          cellWallSize={mazeOptions.cellWallSize}\r\n          maxStrokeWidth={mazeOptions.maxStrokeWidth}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  p5_MazeContext,\r\n  P5_MazeContext,\r\n  MazeOptionsUiContext,\r\n  mazeOptionsUiContext\r\n} from \"../../AppContext\";\r\nimport { ExpansionPanelWrapper } from \"./ExpansionPanel\";\r\nimport { Labels } from \"../../shared/labels\";\r\nimport { SketchPicker } from \"react-color\";\r\n\r\nexport const CellColorSelectWrapper = () => {\r\n  let mazeContext: P5_MazeContext = useContext(p5_MazeContext);\r\n  let mazeOptionsUiContextInstance: MazeOptionsUiContext = useContext(\r\n    mazeOptionsUiContext\r\n  );\r\n  const { mazeOptionsSetter, mazeOptions } = mazeContext;\r\n  const { panelIsExpandedState } = mazeOptionsUiContextInstance;\r\n  const { cellColor } = mazeOptions;\r\n  const { handleCellColorChange } = mazeOptionsSetter;\r\n  return (\r\n    <ExpansionPanelWrapper\r\n      panelIsExpanded={panelIsExpandedState.cellSize}\r\n      name={Labels.CELL_COLOR}\r\n      render={() => (\r\n        <SketchPicker\r\n          color={cellColor}\r\n          onChange={handleCellColorChange}\r\n          // onChangeComplete={handleColorChangeComplete}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { p5_MazeContext, P5_MazeContext, MazeOptionsUiContext, mazeOptionsUiContext } from \"../../AppContext\";\r\nimport { ExpansionPanelWrapper } from \"./ExpansionPanel\";\r\nimport { Labels } from \"../../shared/labels\";\r\nimport { SketchPicker } from \"react-color\";\r\n\r\nexport const CellWallColorSelectWrapper = () => {\r\n  let mazeContext: P5_MazeContext = useContext(p5_MazeContext);\r\n  let mazeOptionsUiContextInstance: MazeOptionsUiContext = useContext(\r\n    mazeOptionsUiContext\r\n  );\r\n  const { mazeOptionsSetter, mazeOptions } = mazeContext;\r\n  const { panelIsExpandedState } = mazeOptionsUiContextInstance;\r\n  const { cellWallColor } = mazeOptions;\r\n  const { handleCellWallColorChange } = mazeOptionsSetter;\r\n  return (\r\n    <ExpansionPanelWrapper\r\n      name={Labels.CELL_WALL_COLOR}\r\n      panelIsExpanded={panelIsExpandedState.cellWallColor}\r\n      render={() => (\r\n        <SketchPicker\r\n          color={cellWallColor}\r\n          onChange={handleCellWallColorChange}\r\n          // onChangeComplete={handleColorChangeComplete}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { p5_MazeContext, P5_MazeContext, MazeOptionsUiContext, mazeOptionsUiContext } from \"../../AppContext\";\r\nimport { ExpansionPanelWrapper } from \"./ExpansionPanel\";\r\nimport { Labels } from \"../../shared/labels\";\r\nimport { SketchPicker } from \"react-color\";\r\n\r\nexport const MazeBackgroundColorSelectWrapper = () => {\r\n  let mazeContext: P5_MazeContext = useContext(p5_MazeContext);\r\n  let mazeOptionsUiContextInstance: MazeOptionsUiContext = useContext(\r\n    mazeOptionsUiContext\r\n  );\r\n  const { panelIsExpandedState } = mazeOptionsUiContextInstance;\r\n  const { mazeOptionsSetter, mazeOptions } = mazeContext;\r\n  const { backgroundColor } = mazeOptions;\r\n  const { handleBackgroundColorChange } = mazeOptionsSetter;\r\n  return (\r\n    <ExpansionPanelWrapper\r\n      panelIsExpanded={panelIsExpandedState.mazeBackgroundColor}\r\n      name={Labels.MAZE_BACKGROUND_COLOR}\r\n      render={() => (\r\n        <SketchPicker\r\n          color={backgroundColor}\r\n          onChange={handleBackgroundColorChange}\r\n          // onChangeComplete={handleColorChangeComplete}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport FormGroup from \"@material-ui/core/FormGroup/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\n//https://material-ui.com/components/switches/\r\nimport { Switch } from \"@material-ui/core\";\r\n\r\nimport { RouterStore } from \"mobx-react-router\";\r\nimport { UiPreferencesStore } from \"../../stores/UiPreferencesStore\";\r\n\r\ninterface InverseColorModeToggleProps {\r\n  routerStore?: RouterStore;\r\n  uiPreferencesStore?: UiPreferencesStore;\r\n}\r\n\r\nconst InverseColorModeToggle: FunctionComponent<InverseColorModeToggleProps> = (\r\n  props: InverseColorModeToggleProps\r\n) => {\r\n  const { toggleInverseColorMode, inverseColorMode } = props.uiPreferencesStore!;\r\n\r\n  const handleChange = (name: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let status = event.target.checked;\r\n    console.log(\"changing inverse color mode to\");\r\n    console.log(status);\r\n    toggleInverseColorMode();\r\n  };\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={inverseColorMode}\r\n            onChange={handleChange(\"checkedB\")}\r\n            value=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Inverse Colors\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default inject(\r\n  \"uiPreferencesStore\",\r\n  \"routerStore\"\r\n)(observer(InverseColorModeToggle));\r\n","import React, { FunctionComponent, useContext } from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport FormGroup from \"@material-ui/core/FormGroup/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\n//https://material-ui.com/components/switches/\r\nimport { Switch } from \"@material-ui/core\";\r\n\r\nimport { RouterStore } from \"mobx-react-router\";\r\nimport { UiPreferencesStore } from \"../../stores/UiPreferencesStore\";\r\nimport { p5_MazeContext } from \"../../AppContext\";\r\nimport { logToConsole, logObjToConsole } from \"../../shared/logger\";\r\n\r\ninterface InverseColorModeToggleProps {\r\n  routerStore?: RouterStore;\r\n  uiPreferencesStore?: UiPreferencesStore;\r\n}\r\n\r\nconst Use3dModeToggle: FunctionComponent<InverseColorModeToggleProps> = (\r\n  props: InverseColorModeToggleProps\r\n) => {\r\n  const { toggleUpdateUse3dMode, use3dMode } = props.uiPreferencesStore!;\r\n  // const context = useContext(p5_MazeContext)\r\n  // const {p5_MazeFuncs } = context\r\n\r\n  const handleChange = (name: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let status = event.target.checked;\r\n    logToConsole(`changing user 3d mode to: ${status}`);\r\n    toggleUpdateUse3dMode();\r\n    // p5_MazeFuncs.resetMaze();\r\n  };\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={use3dMode}\r\n            onChange={handleChange(\"checkedB\")}\r\n            value=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Use 3D\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default inject(\r\n  \"uiPreferencesStore\",\r\n  \"routerStore\"\r\n)(observer(Use3dModeToggle));\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport FormatSize from \"@material-ui/icons/FormatSize\";\r\n\r\n//Maze Config\r\nimport { MazeOptionsSetter } from \"../mazeGenComp/mazeUtils/mazeOptionsSetter\";\r\nimport { CELL_MIN_SIZE, MIN_NUMBER_OF_CELLS_HORIZONTALLY, CELL_SIZE_INCREMENT_INTERVAL } from \"../shared/constants\";\r\n\r\ninterface FrameRateSlider {\r\n  mazeOptionsSetter: MazeOptionsSetter;\r\n  onFrameChange: Function;\r\n  frameRate: number\r\n\r\n}\r\n\r\nconst FrameRateSlider = (props: FrameRateSlider) => {\r\n  const { mazeOptionsSetter, frameRate ,onFrameChange} = props!;\r\n  //frame rate rules\r\n  let minFrameRate = 1\r\n  let maxFrameRate = 100//?\r\n  let frameRateIncrementor = 1\r\n  \r\n\r\n  //create ui component\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      width: 200\r\n    },\r\n    input: {\r\n      width: 42\r\n    }\r\n  });\r\n  const classes = useStyles();\r\n\r\n  //Set up state for slider\r\n  const [value, setValue] = React.useState(frameRate);\r\n\r\n  //Event for slider\r\n  const handleSliderChange = (event: any, newValue: any) => {\r\n    setStateAndPersistSelection(newValue);\r\n  };\r\n  //Even for input\r\n  const handleInputChange = (event: any) => {\r\n    let newValue =\r\n      event.target.value === \"\" ? CELL_MIN_SIZE : Number(event.target.value);\r\n    setStateAndPersistSelection(newValue);\r\n  };\r\n  const setStateAndPersistSelection = (newValue: number) => {\r\n    let valueForStorage = setStateConditionally(newValue);\r\n    updateCellSizeForMaze(valueForStorage);\r\n  };\r\n  const updateCellSizeForMaze = (newValue: number) => {\r\n    mazeOptionsSetter.handleFrameRateChange(newValue);\r\n    onFrameChange();\r\n  };\r\n\r\n  //state change\r\n\r\n  const handleBlur = () => {\r\n    setStateConditionally(value);\r\n  };\r\n  const setStateConditionally = (value: number): number => {\r\n    if (value < minFrameRate) {\r\n      setValue(minFrameRate);\r\n      return minFrameRate;\r\n    } else if (value > maxFrameRate) {\r\n      setValue(maxFrameRate);\r\n      return maxFrameRate;\r\n    } else {\r\n      setValue(value);\r\n      return value;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item>\r\n          <FormatSize />\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider\r\n            value={typeof value === \"number\" ? value : CELL_MIN_SIZE}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Input\r\n            className={classes.input}\r\n            value={value}\r\n            margin=\"dense\"\r\n            onChange={handleInputChange}\r\n            onBlur={handleBlur}\r\n            inputProps={{\r\n              step: frameRateIncrementor,\r\n              min: CELL_MIN_SIZE,\r\n              max: maxFrameRate,\r\n              type: \"number\",\r\n              \"aria-labelledby\": \"input-slider\"\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default FrameRateSlider;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  p5_MazeContext,\r\n  P5_MazeContext,\r\n  mazeOptionsUiContext,\r\n  MazeOptionsUiContext\r\n} from \"../../../AppContext\";\r\nimport { ExpansionPanelWrapper } from \"../ExpansionPanel\";\r\nimport { Labels } from \"../../../shared/labels\";\r\nimport FrameRateSlider from \"../../FrameRateSlider\";\r\n\r\nexport const FrameRateSliderWrapper = () => {\r\n  let mazeContextInstance: P5_MazeContext = useContext(p5_MazeContext);\r\n  let mazeOptionsUiContextInstance: MazeOptionsUiContext = useContext(\r\n    mazeOptionsUiContext\r\n  );\r\n  const { mazeOptionsSetter, mazeOptions, p5_MazeFuncs } = mazeContextInstance;\r\n  const {panelIsExpandedState} = mazeOptionsUiContextInstance\r\n  const { resetMaze } = p5_MazeFuncs;\r\n  return (\r\n    <ExpansionPanelWrapper\r\n      name={Labels.FRAME_RATE}\r\n      panelIsExpanded={panelIsExpandedState.frameRate}\r\n      render={() => (\r\n        <FrameRateSlider\r\n          mazeOptionsSetter={mazeOptionsSetter}\r\n          onFrameChange={resetMaze}\r\n          frameRate={mazeOptions.frameRate}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport FormGroup from \"@material-ui/core/FormGroup/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\n//https://material-ui.com/components/switches/\r\nimport { Switch } from \"@material-ui/core\";\r\n\r\nimport { RouterStore } from \"mobx-react-router\";\r\nimport { UiPreferencesStore } from \"../../stores/UiPreferencesStore\";\r\n\r\ninterface AnimateMirrorToggleProps {\r\n  routerStore?: RouterStore;\r\n  uiPreferencesStore?: UiPreferencesStore;\r\n}\r\n\r\nconst AnimateMirrorToggle: FunctionComponent<AnimateMirrorToggleProps> = (\r\n  props: AnimateMirrorToggleProps\r\n) => {\r\n  const { toggleAnimateMirror, animateMirror } = props.uiPreferencesStore!;\r\n\r\n  const handleChange = (name: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let status = event.target.checked;\r\n    console.log(\"changing inverse color mode to\");\r\n    console.log(status);\r\n    toggleAnimateMirror();\r\n  };\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={animateMirror}\r\n            onChange={handleChange(\"checkedB\")}\r\n            value=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Show 3D Mirror\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default inject(\r\n  \"uiPreferencesStore\",\r\n  \"routerStore\"\r\n)(observer(AnimateMirrorToggle));\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport FormGroup from \"@material-ui/core/FormGroup/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\n//https://material-ui.com/components/switches/\r\nimport { Switch } from \"@material-ui/core\";\r\n\r\nimport { RouterStore } from \"mobx-react-router\";\r\nimport { MazeViewStore } from \"../../stores/MazeViewStore\";\r\nimport { logger } from \"../../utils/loggingUtils\";\r\n\r\ninterface MazeGenCubeProjectionShowToggleProps {\r\n  routerStore?: RouterStore;\r\n  mazeViewStore?: MazeViewStore;\r\n}\r\n\r\nconst MazeGenCubeProjectionShowToggle: FunctionComponent<MazeGenCubeProjectionShowToggleProps> = (\r\n  props: MazeGenCubeProjectionShowToggleProps\r\n) => {\r\n  const { changeShowGeneratorCubeProjection, showGeneratorCubeProjection } = props.mazeViewStore!;\r\n\r\n  const handleChange = (name: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    let status = event.target.checked;\r\n    logger(`changing inverse color mode to ${status}`);\r\n    changeShowGeneratorCubeProjection();\r\n  };\r\n\r\n  return (\r\n    <FormGroup row>\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={showGeneratorCubeProjection}\r\n            onChange={handleChange(\"checked\")}\r\n            value=\"checked\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Show 3D Cube Projection\"\r\n      />\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default inject(\r\n  \"mazeViewStore\",\r\n  \"routerStore\"\r\n)(observer(MazeGenCubeProjectionShowToggle));\r\n","import React, { CSSProperties, FunctionComponent } from \"react\";\r\n\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { Labels } from \"../shared/labels\";\r\nimport { ExpansionPanelWrapper } from \"./MazeOptionsUiExpansionPanel/ExpansionPanel\";\r\nimport { CellSizeSliderWrapper } from \"./MazeOptionsUiExpansionPanel/CellSizeSliderWrapper\";\r\nimport { CellWallSizeSliderWrapper } from \"./MazeOptionsUiExpansionPanel/CellWallSizeSliderWrapper\";\r\nimport { CellColorSelectWrapper } from \"./MazeOptionsUiExpansionPanel/CellColorSelectWrapper\";\r\nimport { CellWallColorSelectWrapper } from \"./MazeOptionsUiExpansionPanel/CellWallColorSelectWrapper\";\r\nimport { MazeBackgroundColorSelectWrapper } from \"./MazeOptionsUiExpansionPanel/MazeBackgroundColorSelectWrapper\";\r\n// import { CellWallStyleWrapper } from \"./MazeOptionsUiExpansionPanel/CellWallStyleWrapper\";\r\nimport InverseColorModeToggle from \"../views/AppBarItems/InverseColorModeToggle\";\r\nimport Use3dModeToggle from \"../views/AppBarItems/Use3dModeToggle\";\r\nimport { FrameRateSliderWrapper } from \"./MazeOptionsUiExpansionPanel/NumberBasedSelections/FrameRateSliderWrapper\";\r\nimport AnimateMirrorToggle from \"../views/AppBarItems/AnimateMirrorToggle\";\r\nimport { stores } from \"../stores\";\r\nimport MazeGenCubeProjectionShowToggle from \"../views/AppBarItems/MazeGenCubeProjectionShowToggle\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { MazeViewStore } from \"../stores/MazeViewStore\";\r\nimport { UiPreferencesStore } from \"../stores/UiPreferencesStore\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\"\r\n    }\r\n  })\r\n);\r\n\r\n\r\n\r\nconst toggleOptionsWrapper: CSSProperties = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n}\r\n\r\n\r\ninterface MazeOptionsUiExpansionPanelProps {\r\n  mazeViewStore?: MazeViewStore;\r\n  uiPreferencesStore?: UiPreferencesStore;\r\n}\r\n\r\n\r\n//TODO Move to maze options ui defaults\r\nconst MazeOptionsUiExpansionPanel: FunctionComponent<MazeOptionsUiExpansionPanelProps> = (\r\n  props: MazeOptionsUiExpansionPanelProps\r\n) => {\r\n  const classes = useStyles();\r\n  const { showGeneratorCubeProjection } = props.mazeViewStore!\r\n  const { use3dMode } = props.uiPreferencesStore!;\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanelWrapper\r\n        panelIsExpanded={false}\r\n        name={Labels.HEADER}\r\n        render={() => (\r\n          <>\r\n            <div style={toggleOptionsWrapper}>\r\n              <Use3dModeToggle key=\"use3d\" />\r\n              <InverseColorModeToggle key=\"inverseColors\" />\r\n              {/* Only only offer projection if in 3d color mode*/}\r\n              {use3dMode ? <MazeGenCubeProjectionShowToggle key=\"mazeGenProjection\" /> : null}\r\n              {/* Only offer mirror option if showing projection */}\r\n              {use3dMode && showGeneratorCubeProjection ? <AnimateMirrorToggle key=\"animateMirror\" /> : null}\r\n            </div>\r\n          </>\r\n        )}\r\n      />\r\n      <FrameRateSliderWrapper />\r\n      <CellSizeSliderWrapper />\r\n      <CellWallSizeSliderWrapper />\r\n      <CellColorSelectWrapper />\r\n      <CellWallColorSelectWrapper />\r\n      <MazeBackgroundColorSelectWrapper />\r\n      {/* {use3dMode ? null : <CellWallStyleWrapper />  */}\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default inject(\r\n  \"uiPreferencesStore\",\r\n  \"mazeViewStore\",\r\n  \"routerStore\"\r\n)(observer(MazeOptionsUiExpansionPanel));\r\n\r\n","import React, { useEffect, useContext } from \"react\";\r\n\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n//Matrial icons\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport AppIcon from \"@material-ui/icons/Apps\";\r\n\r\nimport styles from \"./ExpandSidebar.module.scss\";\r\nimport MazeOptionsUiExpansionPanel from \"../uiComponents/MazeOptionsUiExpansionPanel\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { UiPreferencesStore } from \"../stores/UiPreferencesStore\";\r\nimport { RouterStore } from \"mobx-react-router\";\r\n\r\n\r\nconst useMenuStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n      flexGrow: 1\r\n    }\r\n  })\r\n);\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: Math.floor(window.innerWidth / 2)\r\n  },\r\n  fullList: {\r\n    width: \"auto\"\r\n  }\r\n});\r\ninterface ExpandSideBarProps {\r\n  routerStore?: RouterStore;\r\n  uiPreferencesStore?: UiPreferencesStore;\r\n}\r\n\r\n\r\nconst ExpandSideBar = (props: ExpandSideBarProps) =>  {\r\n  const menuClassStyles = useMenuStyles();\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false\r\n  });\r\n  const { toggleMazeOptionsIsOpen, mazeOptionsIsOpen } = props.uiPreferencesStore!\r\n  type DrawerSide = \"top\" | \"left\" | \"bottom\" | \"right\";\r\n  const toggleDrawer = (side: DrawerSide, open: boolean) => (\r\n    event: React.KeyboardEvent | React.MouseEvent\r\n  ) => {\r\n    console.log(`Maze options menu is open: ${mazeOptionsIsOpen}`)\r\n    toggleMazeOptionsIsOpen()\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      ((event as React.KeyboardEvent).key === \"Tab\" ||\r\n        (event as React.KeyboardEvent).key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [side]: open });\r\n  };\r\n\r\n  const sideList = (side: DrawerSide) => (\r\n    <div className={classes.list} role=\"presentation\">\r\n      <MazeOptionsUiExpansionPanel />\r\n    </div>\r\n  );\r\n\r\n  const fullList = (side: DrawerSide) => (\r\n    <div\r\n      className={classes.fullList}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(side, false)}\r\n      onKeyDown={toggleDrawer(side, false)}\r\n    >\r\n      <List>\r\n        {[\"Inbox\", \"Starred\", \"Send email\", \"Drafts\"].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n  useEffect(() => {\r\n    const keepMenuOpen = true;\r\n    if (keepMenuOpen) {\r\n      toggleDrawer(\"right\", true);\r\n    }\r\n  });\r\n  return (\r\n    <div className={styles.toggleMazeOptionsUi}>\r\n      {/* Make icon instead */}\r\n      {/* <div\r\n        className={styles.toggleMazeOptionsUiButton}\r\n        onClick={toggleDrawer(\"left\", true)}\r\n      >\r\n        <Typography variant=\"h5\">Maze Generator</Typography>\r\n      </div> */}\r\n      <div\r\n        className={styles.toggleMazeOptionsUiButton}\r\n        onClick={toggleDrawer(\"left\", true)}\r\n      ></div>\r\n      <IconButton\r\n        className={menuClassStyles.menuButton}\r\n        color=\"inherit\"\r\n        aria-label=\"menu\"\r\n      >\r\n        {/* <AppIcon /> */}\r\n      </IconButton>\r\n      <Button onClick={toggleDrawer(\"left\", true)}>\r\n        <Typography>Left</Typography>\r\n      </Button>\r\n      <Button onClick={toggleDrawer(\"right\", true)}>\r\n        <Typography>Right</Typography>\r\n      </Button>\r\n      {/* <Button onClick={toggleDrawer('top', true)}>Open Top</Button>\r\n      <Button onClick={toggleDrawer('bottom', true)}>Open Bottom</Button> */}\r\n      <SwipeableDrawer\r\n        transitionDuration={2}\r\n        open={state.left}\r\n        onClose={toggleDrawer(\"left\", false)}\r\n        onOpen={toggleDrawer(\"left\", true)}\r\n      >\r\n        {sideList(\"left\")}\r\n      </SwipeableDrawer>\r\n      <SwipeableDrawer\r\n        anchor=\"top\"\r\n        open={state.top}\r\n        transitionDuration={1}\r\n        onClose={toggleDrawer(\"top\", false)}\r\n        onOpen={toggleDrawer(\"top\", true)}\r\n      >\r\n        {fullList(\"top\")}\r\n      </SwipeableDrawer>\r\n      <SwipeableDrawer\r\n        anchor=\"bottom\"\r\n        transitionDuration={3}\r\n        open={state.bottom}\r\n        onClose={toggleDrawer(\"bottom\", false)}\r\n        onOpen={toggleDrawer(\"bottom\", true)}\r\n      >\r\n        {fullList(\"bottom\")}\r\n      </SwipeableDrawer>\r\n      <SwipeableDrawer\r\n        anchor=\"right\"\r\n        open={state.right}\r\n        onClose={toggleDrawer(\"right\", false)}\r\n        onOpen={toggleDrawer(\"right\", true)}\r\n      >\r\n        {sideList(\"right\")}\r\n      </SwipeableDrawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default inject(\r\n  \"uiPreferencesStore\",\r\n  \"routerStore\"\r\n)(observer(ExpandSideBar));","import React, { useContext } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\n//Components\r\nimport ExpandSideBar from \"../../components/ExpandSidebar\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { APP_ROUTES, MAIN_MENU_OPTIONS } from \"../../utils/routeUtils\";\r\nimport { makeStyles, createStyles, Theme, Button } from \"@material-ui/core\";\r\n\r\nimport styles from \"./Header.module.scss\";\r\nimport { mazeOptionsUiContext, p5_MazeContext } from \"../../AppContext\";\r\nimport { MazeViewStore } from \"../../stores/MazeViewStore\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\ninterface HeaderProps {\r\n  mazeViewStore?: MazeViewStore;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n      flexGrow: 1\r\n    }\r\n  })\r\n);\r\n\r\nfunction HideOnScroll(props: any) {\r\n  const { children, window } = props;\r\n  // Note that you normally won't need to set the window ref as useScrollTrigger\r\n  // will default to window.\r\n  // This is only being set here because the demo is in an iframe.\r\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\r\n\r\n  return (\r\n    <Slide appear={false} direction=\"down\" in={!trigger}>\r\n      {children}\r\n    </Slide>\r\n  );\r\n}\r\n//Button to show and hit TODO\r\n\r\n// HideOnScroll.propTypes = {\r\n//   children: PropTypes.element.isRequired,\r\n//   /**\r\n//    * Injected by the documentation to work in an iframe.\r\n//    * You won't need it on your project.\r\n//    */\r\n//   window: PropTypes.func\r\n// };\r\n\r\nconst Header = (props: HeaderProps) => {\r\n  const classes = useStyles();\r\n  const mazeContext = useContext(p5_MazeContext);\r\n  const { changeView } = props.mazeViewStore!;\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <HideOnScroll {...props}>\r\n        <AppBar>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n              color=\"inherit\"\r\n              aria-label=\"menu\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <NavLink\r\n              to={APP_ROUTES.LOGIN}\r\n              className={styles.NavLink}\r\n              activeClassName={styles.SelectedLink}\r\n            >\r\n              {APP_ROUTES.LOGIN.toUpperCase()}\r\n            </NavLink>\r\n            <NavLink\r\n              to={APP_ROUTES.MAZE}\r\n              className={styles.NavLink}\r\n              activeClassName={styles.SelectedLink}\r\n            >\r\n              {APP_ROUTES.MAZE.toUpperCase()}\r\n            </NavLink>\r\n            <Button\r\n              onClick={() => {\r\n                changeView();\r\n              }}\r\n              color=\"inherit\"\r\n            >\r\n              <Typography>\r\n                {MAIN_MENU_OPTIONS.ENABLE_FOLLOW_CELL_CREATOR}\r\n              </Typography>\r\n            </Button>\r\n            <Button color=\"inherit\">\r\n              <Typography>{MAIN_MENU_OPTIONS.SAVE}</Typography>\r\n            </Button>\r\n            <ExpandSideBar />\r\n          </Toolbar>\r\n        </AppBar>\r\n      </HideOnScroll>\r\n      <Toolbar />\r\n    </div>\r\n  );\r\n};\r\nexport default inject(\"mazeViewStore\")(observer(Header));\r\n","import React from \"react\";\r\n// export interface HomeProps {\r\n\r\n// const Home: React.SFC<HomeProps> = () => {\r\nconst Home: React.SFC = () => {\r\n  return (\r\n<div> Home</div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Point } from \"./Point\";\r\n\r\nexport class CellWallPoints {\r\n    constructor(\r\n        public startPoint: Point,\r\n        public endPoint: Point\r\n    ) {\r\n\r\n    }\r\n}","export class Point {\r\n    constructor(\r\n        public x: number,\r\n        public y: number\r\n    ) { }\r\n}","export const getPointValsAtIndex = (\r\n    col: number,\r\n    row: number,\r\n    numColumns: number,\r\n    numRows: number\r\n) => {\r\n    //Handle the (literal) edge cases\r\n    if (\r\n        //in case index of neighbors would be outsidd of the grid\r\n        col < 0 ||\r\n        row < 0 ||\r\n        col > (numColumns - 1) ||\r\n        row > (numRows - 1)\r\n    ) {\r\n        return -1\r\n    } else {\r\n        return col + row * numColumns\r\n    }\r\n}","import { mazeOptionsUiContext } from \"../../AppContext\"\r\nimport { MazeOptions } from \"./mazeOptions\"\r\nimport { useContext } from \"react\"\r\nimport { Point } from \"../components/Point\"\r\n\r\n\r\nexport class ProjectionTo3dUtilClass {\r\n    constructor() {\r\n\r\n    }\r\n}\r\nexport const offsetWidthBy3dProjection = (value: number, mazeOptions: MazeOptions): number => {\r\n    const { windowWidth,\r\n    } = mazeOptions\r\n    let offsetWidth3d = Math.floor(value - (windowWidth / 2))\r\n    // console.log(offsetWidth3d)\r\n    return offsetWidth3d\r\n}\r\nexport const offsetHeightBy3dProjection = (value: number, mazeOptions: MazeOptions): number => {\r\n    const {\r\n        windowHeight,\r\n    } = mazeOptions\r\n    let offsetHeight3d = Math.floor(value - (windowHeight / 2))\r\n    // console.log(offsetHeight3d)\r\n    return offsetHeight3d\r\n}\r\n\r\n\r\n\r\nexport const getProjectionFor3D = (point: Point, mazeOptions: MazeOptions) => {\r\n    let x_value = point.x\r\n    let y_value = point.y\r\n    //set up point vals based on 2D or 3D projection \r\n    //TODO extract this logic\r\n    let xColPointValToDraw = offsetWidthBy3dProjection(x_value, mazeOptions)\r\n    let yRowPointValToDraw = offsetHeightBy3dProjection(y_value, mazeOptions)\r\n    return new Point(xColPointValToDraw, yRowPointValToDraw)\r\n}","import p5 from \"p5\";\r\nimport { ShowWallIndicator } from \"./ShowWallIndicator\";\r\nimport { MazeOptions } from \"../../mazeUtils/mazeOptions\";\r\nimport { CELL_WALL_WITH_DEPTH_Z_VALUE } from \"../../../shared/constants\";\r\nimport { invertColors } from \"../../../utils/colorUtils\";\r\n\r\nexport class DrawDepthAnimation {\r\n    constructor(\r\n        private _mazeOptions: MazeOptions,\r\n        private _showWallIndicator: ShowWallIndicator,\r\n        private _p: p5,\r\n        private _column: number,\r\n        private _cellWidth: number,\r\n        private _row: number,\r\n        private _cellHeight: number\r\n    ) {\r\n        if (this._showWallIndicator.drawTop) {\r\n            this.drawWall(\r\n                this._cellWidth,\r\n                1 , //this._mazeOptions.cellWallSize,\r\n                this._mazeOptions.cellSize / 2 ,// CELL_WALL_WITH_DEPTH_Z_VALUE,\r\n                this._column * this._cellWidth + (this._cellWidth / 2),\r\n                this._row * this._cellHeight\r\n            )\r\n        }\r\n        if (this._showWallIndicator.drawRight) {\r\n            this.drawWall(\r\n                1 ,//this._mazeOptions.cellWallSize,\r\n                this._cellHeight,\r\n                this._mazeOptions.cellSize / 2 ,// CELL_WALL_WITH_DEPTH_Z_VALUE,\r\n                (this._column + 1) * this._cellWidth,\r\n                this._row * this._cellHeight + (this._cellHeight / 2)\r\n            )\r\n        }\r\n        if (this._showWallIndicator.drawBottom) {\r\n            this.drawWall(\r\n                this._cellWidth,\r\n                1, //this._mazeOptions.cellWallSize,\r\n                this._mazeOptions.cellSize / 2 ,// CELL_WALL_WITH_DEPTH_Z_VALUE,\r\n                this._column * this._cellWidth + (this._cellWidth / 2),\r\n                (this._row + 1) * this._cellHeight\r\n            )\r\n        }\r\n        if (this._showWallIndicator.drawLeft) {\r\n            this.drawWall(\r\n                1, //this._mazeOptions.cellWallSize,\r\n                this._cellHeight,\r\n                this._mazeOptions.cellSize / 2 ,// CELL_WALL_WITH_DEPTH_Z_VALUE,\r\n                (this._column) * this._cellWidth,\r\n                this._row * this._cellHeight + (this._cellHeight / 2)\r\n            )\r\n        }\r\n\r\n    }\r\n    drawWall = (\r\n        cellWallsWithDepthX: number,\r\n        cellWallsWithDepthY: number,\r\n        cellWallsWithDepthZ: number,\r\n        xTranslate: number,\r\n        yTranslate: number\r\n    ) => {\r\n        this._p.push()\r\n        //TODO Extract color inverter from cell and use here\r\n        // let { r, g, b, a } = this._mazeOptions.cellWallColor\r\n        // this._p.fill(r, g, b, a)\r\n        // this._p.fill(155, 155, 155)\r\n        let { r, g, b, a } = invertColors(this._mazeOptions.cellWallColor)\r\n        this._p.fill(r, g, b)\r\n        //translate to consider shape origin point have central alignment\r\n        this._p.translate(\r\n            xTranslate - (this._mazeOptions.windowWidth / 2) + (this._mazeOptions.padding / 2),\r\n            yTranslate - (this._mazeOptions.windowHeight / 2) + (this._mazeOptions.padding / 2),\r\n            0)\r\n        // this._cellWidth > this._cellHeight ? this._cellWidth / 2 : this._cellHeight / 2);\r\n        // this._p.texture(this._img);\r\n\r\n        // let multiplier = Math.floor(10 * Math.abs(this._p.sin(this.depthOffset))) / 10\r\n        this._p.box(\r\n            cellWallsWithDepthX,\r\n            cellWallsWithDepthY,\r\n            cellWallsWithDepthZ\r\n        )\r\n        this._p.pop()\r\n    }\r\n}","import { CellWallPoints } from \"../CellWallPoints\"\r\nimport { Point } from \"../Point\"\r\nimport { logger } from \"../../../utils/loggingUtils\"\r\nimport { getPointValsAtIndex } from \"../../../utils/gridUtils\"\r\nimport { MazeOptions } from \"../../mazeUtils/mazeOptions\"\r\nimport { CellWallOptions } from \"../../../uiComponents/MazeOptionsUiExpansionPanel/CellWallStyleWrapper\"\r\nimport { offsetWidthBy3dProjection, offsetHeightBy3dProjection, getProjectionFor3D } from \"../../mazeUtils/projectionUtils\"\r\nimport { mazeOptionsUiContext } from \"../../../AppContext\"\r\nimport { DEFAULT_Z_DISTANCE } from \"../../../shared/constants\"\r\nimport { Image } from \"p5\"\r\nimport { ShowWallIndicator } from \"./ShowWallIndicator\"\r\nimport { DrawDepthAnimation } from \"./DrawDepthAnimation\"\r\nimport { invertColors } from \"../../../utils/colorUtils\"\r\nimport { stores } from \"../../../stores\"\r\n\r\nexport class Cell {\r\n    //TOP, RIGHT, BOTTOM, LEFT\r\n    public walls: boolean[]\r\n    public visited = 0\r\n    public lastVisitedState = 0\r\n    public shouldShow = true\r\n    public neightbors: Cell[] = []\r\n    private stackSubractorFromColor: number = 0\r\n    paddingToApplyToLeft: number\r\n    paddingToApplyToTop: number\r\n    paddingToApplyToDepth: number\r\n\r\n    //vertical changes on 3d\r\n    lastStackLength: number = 0\r\n    numberOfIncreasesInStack = 0\r\n    numberOfDecreasesInStack = 0\r\n    potentialExitToMake: boolean = false\r\n    constructor(\r\n        public cellNumber: number,\r\n        public column: any,\r\n        public row: any,\r\n        private _p: p5,\r\n        private _cellWidth: number,\r\n        private _cellHeight: number,\r\n        private _padding: number,\r\n        private _img: Image\r\n\r\n    ) {\r\n        this.paddingToApplyToLeft = this._padding / 2\r\n        this.paddingToApplyToTop = this._padding / 2\r\n        this.paddingToApplyToDepth = this._padding / 2\r\n        //TODO Fix this\r\n        // logger(`Created cell at column #${column} and row #${row}`)\r\n        //i is the column number\r\n        //j is the row number\r\n        this.walls = new Array(4).fill(true)\r\n    }\r\n    // getColorBasedOnVisited = (stackLength: number) => (1 / (this.visited + 1)) * (1 / (stackLength + 1))\r\n    // getColorBasedOnVisited = (stackLength: number) => ((1 / this.visited * 10)) +  (1 / (stackLength * 2 + 1))\r\n    //grid of roughly 400 cells had max of aobut 250 \r\n    //need to calc number o cells and take 5/8s as the max number - to normalize acroos grid sizes\r\n    //make it so that most dominant r, g, b value is oscilated by 250 based on the scope size\r\n    getColorBasedOnVisited = () => this.visited * .242 //+ ((stackLength + 1) / 10) //+ ((stackLength + 1) / 10)\r\n    zTranslate = 0\r\n    depthOffset = 0\r\n    show = (\r\n        mazeOptions: MazeOptions,\r\n        stackLength: number\r\n        // sineOffsetForDepth: number\r\n    ) => {\r\n        const { use3dMode, inverseColorMode, animateMirror } = stores.uiPreferencesStore\r\n        // this.depthOffset = sineOffsetForDepth * 1\r\n        //Before executing show\r\n        //check if anything changed about this cell\r\n\r\n        //Don't show the cell until it's been visited\r\n        if (this.visited === 0) {\r\n            return\r\n        }\r\n\r\n        //set up point vals based on 2D or 3D projection \r\n        //TODO extract this logic\r\n\r\n        let newPoint = new Point(this.column * this._cellWidth, this.row * this._cellHeight)\r\n        let projectedXyPoint = getProjectionFor3D(newPoint, mazeOptions)\r\n\r\n        //set fill based on if visited or not\r\n        if (this.visited) {\r\n            // let colorForVisited = new Color(255, 0, 255, 100)\r\n            // const { r, g, b, a } = colorForVisited\r\n            // this._p.fill(r, g, b, a)\r\n            // logVisitedCell(this.column, this.row)\r\n            //draw the rectangle\r\n            // /https://p5js.org/reference/#/p5/fill\r\n            const divider = this.getColorBasedOnVisited()\r\n            if (this.stackSubractorFromColor === 0) {\r\n                this.stackSubractorFromColor = stackLength\r\n            }\r\n            // else if(stackLength > this.stackSubractorFromColor){\r\n            //     this.stackSubractorFromColor = stackLength\r\n            // }\r\n            logger(`Stack length ${stackLength}`)\r\n            let { r, g, b, a } = mazeOptions.cellColor\r\n            let gValToApply = this._p.floor(g / divider)\r\n            let bValToApply = b - this.stackSubractorFromColor\r\n            //apply color negative if selected\r\n            if (inverseColorMode) {\r\n                r = 255 - r\r\n                gValToApply = 255 - gValToApply\r\n                bValToApply = 255 - bValToApply\r\n            }\r\n\r\n            logger(`\r\n            R: ${r}\r\n            G: ${gValToApply}\r\n            A: ${bValToApply}\r\n            ${a ? a : \"\"}\r\n            `)\r\n            if (a) {\r\n                this._p.fill(\r\n                    this._p.floor(r),\r\n                    this._p.floor(gValToApply),\r\n                    this._p.floor(bValToApply),\r\n                    // a\r\n                )\r\n            } else {\r\n                this._p.fill(\r\n                    this._p.floor(r),\r\n                    this._p.floor(gValToApply),\r\n                    this._p.floor(bValToApply)\r\n                )\r\n\r\n            }\r\n\r\n            // logger(`Cell Color`)\r\n            // logger(color)\r\n            // this._p.fill(255 / (this.getColorBasedOnVisited()),0, 0, 255)\r\n\r\n            this._p.noStroke()\r\n            // let x_position = this.visited ? (this.row * this._cellWidth) : (this.row * this._cellWidth) / 2\r\n            // let y_position = this.visited ? (this.column * this._cellWidth) : (this.column * this._cellWidth) / 2\r\n            // let z_position = this.visited ? (this.column + this.row) * 3 : (this.column + this.row) * 3 / 2\r\n            if (use3dMode) {\r\n                let animate = true\r\n                //keep track if we're going backwards or not\r\n                const DEPTH_CELL_CELL_SIZE_OFFSET = 6\r\n                const STACK_TO_Z_CHANGE_RATIO = mazeOptions.cellSize / DEPTH_CELL_CELL_SIZE_OFFSET\r\n                let goDown = this.lastStackLength > stackLength\r\n                let goUp = this.lastStackLength < stackLength\r\n                // this.cellDepthAnimations.\r\n                if (animate) {\r\n                    if (goDown) {\r\n                        this.numberOfIncreasesInStack += 1\r\n                        this.zTranslate = Math.abs(this.numberOfIncreasesInStack * STACK_TO_Z_CHANGE_RATIO)\r\n                        this.numberOfDecreasesInStack -= 1\r\n\r\n                    } else if (goUp) {\r\n                        this.numberOfDecreasesInStack += 1\r\n                        this.zTranslate = Math.abs(this.numberOfDecreasesInStack * STACK_TO_Z_CHANGE_RATIO)\r\n                        this.numberOfIncreasesInStack -= 1\r\n                    }\r\n                } else {\r\n                    if (goDown) {\r\n                        this.numberOfIncreasesInStack += 1\r\n                        this.zTranslate = this.numberOfIncreasesInStack * STACK_TO_Z_CHANGE_RATIO\r\n                        this.numberOfDecreasesInStack -= 1\r\n\r\n                    } else if (goUp) {\r\n                        this.numberOfDecreasesInStack += 1\r\n                        this.zTranslate = this.numberOfDecreasesInStack * STACK_TO_Z_CHANGE_RATIO\r\n                        this.numberOfIncreasesInStack -= 1\r\n                    }\r\n                }\r\n                const drawProjectionOfCell = (mirror = false) => {\r\n                    this._p.push()\r\n                    //translate to consider shape origin point have central alignment\r\n                    let xOffset = this._cellWidth / 2\r\n                    let yOffset = this._cellHeight / 2\r\n                    this._p.translate(\r\n                        xOffset + projectedXyPoint.x + this.paddingToApplyToLeft,\r\n                        yOffset + projectedXyPoint.y + this.paddingToApplyToTop,\r\n                        mirror ? -this.zTranslate : this.zTranslate);\r\n                    if (this.column + 1 === mazeOptions.numberOfColumns ||\r\n                        this.row + 1 === mazeOptions.numberOfRows\r\n                    ) {\r\n                        this._p.texture(this._img);\r\n                        this.potentialExitToMake = true\r\n                    }\r\n                    // let multiplier = Math.floor(10 * Math.abs(this._p.sin(this.depthOffset))) / 10\r\n                    this._p.box(\r\n                        this._cellWidth - (2 * this.paddingToApplyToLeft),\r\n                        this._cellHeight - (2 * this.paddingToApplyToTop),\r\n                        this._cellHeight - (2 * this.paddingToApplyToDepth))\r\n                    this._p.pop()\r\n                    // console.log(`Dpth adjustment${this.depthOffset} \r\n                    // 2P${this.radialInc * this.depthOscillInc}\r\n                    // should be 2 pie`)\r\n\r\n\r\n                }\r\n                //Only render the cell projection into 3rd space - if it's below the pixel thershold\r\n                const { showGeneratorCubeProjection } = stores.mazeViewStore!;\r\n                if (showGeneratorCubeProjection) {\r\n                    const { maxPixelDepthToRenderProjection } = mazeOptions\r\n                    this.lastStackLength = stackLength\r\n                    if (this.zTranslate <= maxPixelDepthToRenderProjection)\r\n                        drawProjectionOfCell()\r\n                    if (animateMirror && -this.zTranslate >= -maxPixelDepthToRenderProjection) {\r\n                        drawProjectionOfCell(true)\r\n                    }\r\n                }\r\n\r\n            }\r\n            // let newXyMoustPoint = new Point(this._p.mouseX, this._p.mouseY)\r\n            // const { x, y } = getProjectionFor3D(use3d, newXyMoustPoint, mazeOptions)\r\n            // this._p.translate(newXyMoustPoint.x , newXyMoustPoint.y)\r\n            //+1 temp hack until I figure out why there's a 1 px gap\r\n            this._p.rect(\r\n                projectedXyPoint.x + this.paddingToApplyToLeft,\r\n                projectedXyPoint.y + this.paddingToApplyToTop,\r\n                this._cellWidth + 1,\r\n                this._cellHeight + 1)\r\n        }\r\n        //set wall options \r\n        //stroke\r\n        if (mazeOptions.cellWallSize) {\r\n            let newStrokeWeight: number = (mazeOptions.cellWallSize)\r\n            logger(`Stroke weight is ${newStrokeWeight}`)\r\n            this._p.strokeWeight(newStrokeWeight)\r\n        }\r\n        //TODO Figure out if I want to use a non webql canvas\r\n        // if (!use3dMode) {\r\n        //     //stroke cap style\r\n        //     if (mazeOptions.cellWallStrokeCapStyle) {\r\n        //         //set stroke style\r\n        //         let projectCap = this._p.PROJECT\r\n        //         let squareCap = this._p.SQUARE\r\n        //         let roundCap = this._p.ROUND\r\n        //         logger(`Stroke weight is ${mazeOptions.cellWallStrokeCapStyle}`)\r\n        //         switch (mazeOptions.cellWallStrokeCapStyle) {\r\n        //             case CellWallOptions.SQUARE:\r\n        //                 this._p.strokeCap(squareCap)\r\n        //                 break;\r\n        //             case CellWallOptions.PROJECT:\r\n        //                 this._p.strokeCap(projectCap)\r\n        //                 break;\r\n        //             case CellWallOptions.ROUND:\r\n        //                 this._p.strokeCap(roundCap)\r\n        //                 break;\r\n        //         }\r\n        //     }\r\n        // }\r\n        //wall color\r\n        let { r, g, b, a } = invertColors(mazeOptions.cellWallColor)\r\n\r\n        //apply color negative if selected\r\n        if (inverseColorMode) {\r\n            r = 255 - r\r\n            g = 255 - g\r\n            b = 255 - b\r\n        }\r\n        if (!use3dMode) {\r\n            if (a) {\r\n                this._p.stroke(r, g, b, 255)\r\n            } else {\r\n                this._p.stroke(r, g, b, 255)\r\n            }\r\n        }\r\n\r\n\r\n        //Initially just draw the square - Not useful for individual cell wall drawing \r\n        // this._p.rect(xColPointValToDraw, yRowPointValToDraw, GRID_CELL_WIDTH, GRID_CELL_WIDTH)\r\n\r\n        //Create 4 points - create point objects\r\n        //point 1 @ x,y\r\n        let point1 = new Point(projectedXyPoint.x, projectedXyPoint.y)\r\n        //point 2 @ x + width, y\r\n        let point2 = new Point(projectedXyPoint.x + this._cellWidth, projectedXyPoint.y)\r\n        //point 3 @ x + width, y + width\r\n        let point3 = new Point(projectedXyPoint.x + this._cellWidth, projectedXyPoint.y + this._cellHeight)\r\n        //point 4 @ x, y + width\r\n        let point4 = new Point(projectedXyPoint.x, projectedXyPoint.y + this._cellHeight)\r\n\r\n        //Create bools to determine whether to draw each wall\r\n        let showWallIndicator: ShowWallIndicator = {\r\n            drawTop: this.walls[0],\r\n            drawRight: this.walls[1],\r\n            drawBottom: this.walls[2],\r\n            drawLeft: this.walls[3],\r\n        }\r\n\r\n        if (showWallIndicator.drawTop) {\r\n            let pointsToDrawWallBetween = new CellWallPoints(point1, point2)\r\n            this._drawCellWalls(pointsToDrawWallBetween)\r\n        }\r\n        if (showWallIndicator.drawRight) {\r\n            let pointsToDrawWallBetween = new CellWallPoints(point2, point3)\r\n            this._drawCellWalls(pointsToDrawWallBetween)\r\n        }\r\n        if (showWallIndicator.drawBottom) {\r\n            let pointsToDrawWallBetween = new CellWallPoints(point3, point4)\r\n            this._drawCellWalls(pointsToDrawWallBetween)\r\n        }\r\n        if (showWallIndicator.drawLeft) {\r\n            let pointsToDrawWallBetween = new CellWallPoints(point4, point1)\r\n            this._drawCellWalls(pointsToDrawWallBetween)\r\n        }\r\n        if (use3dMode) {\r\n            let drawDepthAnimation = new DrawDepthAnimation(\r\n                mazeOptions,\r\n                showWallIndicator,\r\n                this._p,\r\n                this.column,\r\n                this._cellWidth,\r\n                this.row,\r\n                this._cellHeight\r\n            )\r\n        }\r\n\r\n    }\r\n    private _drawCellWalls = (cellWallPoints: CellWallPoints) => {\r\n        this._p.line(\r\n            cellWallPoints.startPoint.x + this.paddingToApplyToLeft,\r\n            cellWallPoints.startPoint.y + this.paddingToApplyToTop,\r\n            cellWallPoints.endPoint.x + this.paddingToApplyToLeft,\r\n            cellWallPoints.endPoint.y + this.paddingToApplyToTop\r\n        )\r\n    }\r\n    // private _drawCellWallsWithDepth = (cellWallWithDepthPoints: CellWallWithDepthPoints) => {\r\n    //         this._p.push()\r\n    //         //translate to consider shape origin point have central alignment\r\n    //         let xyOffset = mazeOptions.cellSize\r\n    //         const cellWallsWithDepthX = mazeOptions.cellSize,\r\n    //             cellWallsWithDepthY = mazeOptions.cellSize,\r\n    //             cellWallsWithDepthZ = mazeOptions.cellSize\r\n    //         this._p.translate(\r\n    //             cellWallsWithDepthX, cellWallsWithDepthY, cellWallsWithDepthZ);\r\n    //         if (this.column + 1 === mazeOptions.numberOfColumns ||\r\n    //             this.row + 1 === mazeOptions.numberOfRows\r\n    //         ) {\r\n    //             this._p.texture(this._img);\r\n    //             this.potentialExitToMake = true\r\n    //         }\r\n    //         // let multiplier = Math.floor(10 * Math.abs(this._p.sin(this.depthOffset))) / 10\r\n    //         this._p.box(\r\n    //             this._cellWidth - (2 * this.paddingToApplyToLeft),\r\n    //             this._cellHeight - (2 * this.paddingToApplyToTop),\r\n    //             this._cellHeight - (2 * this.paddingToApplyToDepth))\r\n    //         this._p.pop()\r\n    // }\r\n    highlight = (use3d: boolean, mazeOptions: MazeOptions) => {\r\n        var xLength = this.column * this._cellWidth\r\n        var yLength = this.row * this._cellHeight\r\n        let xyProjectedPoint = getProjectionFor3D({ x: xLength, y: yLength }, mazeOptions)\r\n        // this._p.noStroke()\r\n        this._p.fill(0, 0, 255 / (this.visited + 1) / 2, 100)\r\n        this._p.rect(xyProjectedPoint.x + this.paddingToApplyToLeft, xyProjectedPoint.y + this.paddingToApplyToTop, this._cellWidth, this._cellHeight)\r\n    }\r\n\r\n    getRandomNeightborToVisit = (\r\n        numberOfColumns: number = 0,\r\n        numberOfRows: number = 0,\r\n        grid: Cell[]) => {\r\n\r\n        //TODO Clean up logic in classes\r\n        let topNeightbor = grid[getPointValsAtIndex(this.column, this.row - 1, numberOfColumns, numberOfRows)]\r\n        let rightNeightbor = grid[getPointValsAtIndex(this.column + 1, this.row, numberOfColumns, numberOfRows)]\r\n        let bottomNeightbor = grid[getPointValsAtIndex(this.column, this.row + 1, numberOfColumns, numberOfRows)]\r\n        let leftNeightbor = grid[getPointValsAtIndex(this.column - 1, this.row, numberOfColumns, numberOfRows)]\r\n\r\n        //clear out neighbors because this changes \r\n        this.neightbors = []\r\n\r\n        //add any neighbors to array\r\n        if (topNeightbor && !topNeightbor.visited) {\r\n            this.neightbors.push(topNeightbor)\r\n        }\r\n        if (rightNeightbor && !rightNeightbor.visited) {\r\n            this.neightbors.push(rightNeightbor)\r\n        }\r\n        if (bottomNeightbor && !bottomNeightbor.visited) {\r\n            this.neightbors.push(bottomNeightbor)\r\n        }\r\n        if (leftNeightbor && !leftNeightbor.visited) {\r\n            this.neightbors.push(leftNeightbor)\r\n        }\r\n\r\n        //pick random item out of array\r\n        if (this.neightbors.length > 0) {\r\n            let nextNeighborToVisit = this.neightbors[this._p.floor(this._p.random(0, this.neightbors.length))]\r\n            return nextNeighborToVisit\r\n        } else {\r\n            return undefined\r\n        }\r\n    }\r\n}","import p5 from \"p5\";\r\nimport { Cell } from \"./components/Cell/Cell\"\r\nimport { logColumnDuringCreation, logRowDuringCreation, logger } from \"../utils/loggingUtils\"\r\nimport { MazeOptions } from \"./mazeUtils/mazeOptions\"\r\nimport { stores } from '../stores'\r\nimport { DEFAULT_Z_DISTANCE } from \"../shared/constants\"\r\nimport img from \"../assets/exit.jpg\"\r\n\r\nexport class MazeGenerator {\r\n    //vars to hold current column and row during draw phase\r\n    colIndBeingDrawn?: number\r\n    rowIndBeingDrawn?: number\r\n\r\n    //one dimensional array for the grid\r\n    grid: Cell[] = []\r\n\r\n    //hold the path to do recursive traversal\r\n    stack: Cell[] = []\r\n\r\n    //hold reference to current cell in iteration\r\n    currentCell?: Cell\r\n    //TODO Set up builder class for many options handling\r\n    cam: any\r\n    theShader: any = undefined\r\n    zoomValue: number = DEFAULT_Z_DISTANCE\r\n    img: any\r\n    followMouse: boolean\r\n    depthOscillInc = 25\r\n    sineOffsetForDepth: any = 0.0\r\n    sineOffsetForDepthBound: any = 68\r\n    sineOffsetInterval: any = .4\r\n    viewRotation: number;\r\n    //Metrics\r\n    currentCellNumber = 0\r\n    numberOfCells: number = 100\r\n    intervalForDisplayOfMetrics: number = 40\r\n    numberOfFramesDrawn: number = 0\r\n    logMetrics: () => void;\r\n    mazeGenerationComplete: boolean = false\r\n    loggedMazeGenCompleteMetrics: boolean;\r\n    startTime: Date\r\n    endTime: Date;\r\n    runTime: number = 0\r\n    constructor(\r\n        public mazeIsActive: boolean,\r\n        public frameRate: number,\r\n        public p: p5,\r\n        public mazeOptions: MazeOptions,\r\n    ) {\r\n        this.startTime = new Date()\r\n        this.endTime = this.startTime\r\n        console.log(`Maze gen constructor triggered at: ${this.startTime}`)\r\n        //TODO set timers for temp hack until I put in better typing\r\n        // this.img = p.loadImage(\"../../assets/exit.jpg\");\r\n        this.img = p.loadImage(img);\r\n        // p.preload = () => {\r\n        //     this.theShader = p.loadShader('assets/webcam.vert', 'assets/webvam.frag')\r\n        // }\r\n        p.setup = () => {\r\n            const {use3dMode} = stores.uiPreferencesStore!;\r\n            //TEMP\r\n            // if (p.createCapture) {\r\n            //     this.cam = p.createCapture(p.VIDEO);\r\n            //     this.cam.size(710, 400);\r\n\r\n            //     this.cam.hide();\r\n            // }\r\n\r\n            ///\r\n            this.mazeOptions.updateDynamicValues()\r\n            const { windowWidth,\r\n                windowHeight,\r\n                calculatedCellHeight,\r\n                calculatedCellWidth,\r\n                numberOfColumns,\r\n                numberOfRows,\r\n                padding } = mazeOptions\r\n                //TODO Add use webQL option because defualt should be webql\r\n                //other option is html canvas and that will have those stroke cap options\r\n                \r\n            // if (use3dMode) {\r\n                p.createCanvas(windowWidth, windowHeight, p.WEBGL)\r\n            // } else {\r\n            //     p.createCanvas(windowWidth, windowHeight)\r\n            // }\r\n            //set frame rate\r\n            // https://p5js.org/reference/#/p5/frameRate\r\n            //https://www.geeksforgeeks.org/p5-js-framerate-function/\r\n            this.setFrameRate()\r\n\r\n            //set up the grid\r\n            for (var rowNumber = 0; rowNumber < numberOfRows; rowNumber += 1) {\r\n                //log set of iteration\r\n                logRowDuringCreation(rowNumber)\r\n\r\n                for (var columnNumber = 0; columnNumber < numberOfColumns; columnNumber += 1) {\r\n                    //log set of iteration\r\n                    logColumnDuringCreation(columnNumber)\r\n\r\n                    //make a cell\r\n                    this.currentCellNumber += 1\r\n                    let cell = new Cell(\r\n                        this.currentCellNumber,\r\n                        columnNumber,\r\n                        rowNumber,\r\n                        p,\r\n                        calculatedCellWidth,\r\n                        calculatedCellHeight,\r\n                        padding,\r\n                        this.img\r\n                    )\r\n                    //add the cell to the grid\r\n                    this.grid.push(cell)\r\n                }\r\n            }\r\n\r\n            //set current cell as first\r\n            this.currentCell = this.grid[0]\r\n            //set up metrics numbers\r\n            this.numberOfCells = this.mazeOptions.numberOfColumns * this.mazeOptions.numberOfRows\r\n            console.log(`Number of cells ${this.numberOfCells}`)\r\n            this.intervalForDisplayOfMetrics = 120 //Math.floor(this.numberOfCells / 20)\r\n            console.log(`interval for display of metrics is every ${this.intervalForDisplayOfMetrics} frames`)\r\n        }\r\n        //https://p5js.org/reference/#/p5/mouseClicked\r\n        //TODO Figure out how to prevent menu clicks from being registered by p5 internals\r\n        this.followMouse = false\r\n        p.mouseClicked = () => {\r\n            const { mazeOptionsIsOpen } = stores.uiPreferencesStore!\r\n            //Only toggle to follow mouse if click happens when menu is closed\r\n            if (!mazeOptionsIsOpen) {\r\n                this.followMouse = !this.followMouse\r\n            }\r\n        }\r\n        this.logMetrics = () => {\r\n            //keep track of how many frames were drawn\r\n            this.setFrameRate()\r\n            //calculate number of cells to be created\r\n            //set up interval for logging metrics based on number of times logged for entirity of maze generation\r\n            if (!this.mazeGenerationComplete && this.numberOfFramesDrawn % this.intervalForDisplayOfMetrics === 0) {\r\n                let numberOfVisitsEstimate = 2.5\r\n                let numberOfEstimatedSeconds = (this.numberOfCells * numberOfVisitsEstimate) / p.frameRate()\r\n                let estimatedMinutes = Math.floor(numberOfEstimatedSeconds / 60)\r\n                let estimatedSeconds = Math.floor(numberOfEstimatedSeconds * 100)\r\n                let estimatedRunTime = `${estimatedMinutes}:${estimatedSeconds}`\r\n                console.log(`\r\n                FRAME RATE: ${frameRate}\r\n                Frame rate from p.frameRate() = ${p.frameRate()} \r\n                Passed frame rate is ${this.frameRate}\r\n                Extected run time is: ${estimatedRunTime} \r\n                View Rotation ${this.viewRotation}\r\n                Number of visits ${this.numberOfFramesDrawn}\r\n                Cells Created ${this.numberOfCells}\r\n                When Maze Complete Visits to Number of Cells Ratio\r\n                ${(this.numberOfFramesDrawn / this.numberOfCells)}\r\n                Stack size ${this.stack.length}\r\n                `)\r\n            }\r\n            if (this.mazeGenerationComplete && !this.loggedMazeGenCompleteMetrics) {\r\n                //Convert date to unix time for milliseconds comparison\r\n                this.runTime = Math.floor(this.endTime.getTime() / 1000 - this.startTime.getTime() / 1000)\r\n                let minutes = this.runTime > 60 ? Math.floor(this.runTime / 60) : 0\r\n                let seconds = this.runTime > 60 ? this.runTime % 60 : this.runTime\r\n                let adjustedSeconds = seconds < 10 ? `0${seconds}` : seconds\r\n                console.log(`\r\n                Start Time  ${this.startTime}\r\n                End Time ${this.endTime}\r\n                Run time:  ${minutes}:${adjustedSeconds}`)\r\n                this.loggedMazeGenCompleteMetrics = true\r\n\r\n            }\r\n        }\r\n        this.loggedMazeGenCompleteMetrics = false\r\n        this.viewRotation = 0\r\n        p.draw = () => {\r\n            const {use3dMode} = stores.uiPreferencesStore!;\r\n            //Show start time of maze and store in variable for later reference\r\n            if (this.numberOfFramesDrawn === 0) {\r\n                this.startTime = new Date()\r\n                console.log(`Maze generation started at: ${this.startTime}`)\r\n            }\r\n            this.logMetrics()\r\n            if (use3dMode) {\r\n                //temp\r\n                // shader() sets the active shader with our shader\r\n                // https://p5js.org/examples/3d-shader-using-webcam.html\r\n                // if(this.theShader){\r\n                //     p.shader(this.theShader);\r\n                // }\r\n                const mouseX = p.mouseX\r\n                const mouseY = p.mouseY\r\n                const dirY = (mouseX / p.height - 0.5) * 4;\r\n                const dirX = (mouseY / p.width - 0.5) * 4;\r\n                // p.ambientLight(255);\r\n                // p.directionalLight(204, 204, 204, dirX, dirY, 1);\r\n                p.background(255);\r\n\r\n                // Orange point light on the right\r\n                p.pointLight(255, 255, 255, 0, 0, 600);\r\n                p.pointLight(255, 255, 255, 0, 0, -600);\r\n\r\n                // Blue directional light from the left\r\n                p.directionalLight(0, 102, 255, -1, 0, 0);\r\n\r\n                // Yellow spotlight from the front\r\n                p.pointLight(mouseX, mouseY, mazeOptions.windowHeight, 255, 255, 255);\r\n                // p.rotateY(1.75);\r\n                // p.rotateX(1.25);\r\n                // p.rotateX(1.25);\r\n                p.angleMode(p.RADIANS)\r\n                // p.angleMode(p.DEGREES)\r\n                const { mazeView } = stores.mazeViewStore!;\r\n                if (mazeView === 0) {\r\n                    p.rotateX(p.PI / 3)\r\n                    // p.rotateX(66);\r\n                } else {\r\n                    // viewRotation = (p.PI / (((mazeView + 2 % 9) / p.PI)))\r\n                    this.viewRotation = p.sin((mazeView % 6) * 30) * p.PI\r\n                    p.rotateX(this.viewRotation);\r\n                }\r\n                let normalizedMouseX = mouseX - (mazeOptions.windowWidth / 2)\r\n                let normalizedMouseY = mouseY - (mazeOptions.windowHeight / 2)\r\n                let yTranslate = mazeOptions.view.zoomHeightDiff / mazeOptions.windowHeight\r\n\r\n                //Only follow mouse if maze options aren't open\r\n                const { mazeOptionsIsOpen } = stores.uiPreferencesStore!\r\n                if (this.followMouse && !mazeOptionsIsOpen) {\r\n                    p.translate(\r\n                        normalizedMouseX,\r\n                        (this.viewRotation > -1.8 && this.viewRotation < 1.8) ?\r\n                            // -normalizedMouseY + (mazeOptions.windowHeight / 2 * yTranslate) :\r\n                            normalizedMouseY :\r\n                            -normalizedMouseY\r\n                        , mazeOptions.view.zValue\r\n                    )\r\n                } else {\r\n                    p.translate(\r\n                        0,\r\n                        0 - (mazeOptions.windowHeight / 2 * yTranslate),\r\n                        mazeOptions.view.zValue\r\n                    )\r\n                }\r\n\r\n            }\r\n\r\n            ///\r\n            const { numberOfColumns, numberOfRows } = mazeOptions\r\n            // let { r, g, b, a } = mazeOptions.backgroundColor\r\n            let { r, g, b } = mazeOptions.backgroundColor\r\n\r\n            //set background of canvasw\r\n            // if (a) {\r\n            //     p.background(r, g, b, a)\r\n            // } else {\r\n\r\n            //Get UI Preferences\r\n            const { inverseColorMode } = stores.uiPreferencesStore!\r\n            //TODO Move to color util\r\n            if (inverseColorMode) {\r\n                r = 255 - r\r\n                g = 255 - g\r\n                b = 255 - b\r\n            }\r\n            p.background(r, g, b)\r\n\r\n            // }\r\n            // p.background(151)\r\n            //draw each cell in the grid\r\n            let increasing = true\r\n            this.grid.map(cell => {\r\n                //show the cell\r\n                cell.show(mazeOptions, this.stack.length)\r\n                if (increasing) {\r\n                    this.sineOffsetForDepth += this.sineOffsetInterval\r\n                    if (this.sineOffsetForDepth >= this.sineOffsetForDepthBound) {\r\n                        increasing = false\r\n                    }\r\n                    // } else if (this.sineOffsetForDepth >= -p.TWO_PI) {\r\n                } if (!increasing) {\r\n                    this.sineOffsetForDepth -= this.sineOffsetInterval\r\n                    if (this.sineOffsetForDepth <= -this.sineOffsetForDepthBound) {\r\n                        increasing = true\r\n                    }\r\n                }\r\n            })\r\n            if (this.currentCell) {\r\n                //set current cell as visited\r\n                this.currentCell.visited += 1\r\n\r\n                //highlight the current cell to tell it apart from other visited ones\r\n                this.currentCell.highlight(use3dMode, mazeOptions)\r\n                //STEP 1\r\n                //get the random next neightbor cell from the current cell\r\n                let nextCell\r\n                nextCell = this.currentCell.getRandomNeightborToVisit(\r\n                    numberOfColumns,\r\n                    numberOfRows,\r\n                    this.grid\r\n                )\r\n\r\n                if (nextCell) {\r\n                    //STEP 2\r\n                    this.stack.push(this.currentCell)\r\n                    logger(`Stack length ${this.stack.length}`)\r\n\r\n                    //STEP 3\r\n                    this.removeWalls(this.currentCell, nextCell)\r\n                } else {\r\n                    //if no visitable neighbors exist then pop a cell from the stack and check its neighbors in the next iteration\r\n                    nextCell = this.stack.pop()\r\n                }\r\n                if (mazeIsActive) {\r\n                    this.currentCell = nextCell\r\n                }\r\n            }\r\n            //If stack is empty that means we're back to origin and maze gen is complete\r\n            if (!this.mazeGenerationComplete && this.stack.length === 0) {\r\n                //log metrics one last time \r\n                this.logMetrics()\r\n                //show time based metrics\r\n                this.endTime = new Date()\r\n                console.log(`Maze gen ended at ${this.endTime}`)\r\n                this.mazeGenerationComplete = true\r\n            }\r\n            this.numberOfFramesDrawn += 1\r\n        }\r\n    }\r\n    setFrameRate = () => this.p.frameRate(this.frameRate)\r\n    removeWalls = (currentCell: Cell, nextCell: Cell) => {\r\n        //if the current cell and the next cell share the same index column\r\n        //it means they're above current is above next or visa versa\r\n        //get horizontal distance value to set left or right wall on each cell\r\n        let horizontalDistance = currentCell.column - nextCell.column\r\n        // console.log(`Horizontal distance is ${horizontalDistance}`)\r\n        if (horizontalDistance === 1) {\r\n            //current cell is after the next cell \r\n            //so set the current cell left wall to false to remove it\r\n            currentCell.walls[3] = false\r\n            //so set the next cell right wall to false to remove it\r\n            nextCell.walls[1] = false\r\n        } else if (horizontalDistance === -1) {\r\n            //current cell is before the next cell\r\n            //so set the current cell right wall to true to remove it\r\n            currentCell.walls[1] = false\r\n            //so set the next cell left wall to false to remove it\r\n            nextCell.walls[3] = false\r\n        }\r\n        //get vertical distance value to set left or right wall on each cell\r\n        let verticalDistance = currentCell.row - nextCell.row\r\n        // console.log(`Vertical distance is ${verticalDistance}`)\r\n        if (verticalDistance === 1) {\r\n            //current cell is above the next cell \r\n            //so set the current cell bottom wall to false to remove it\r\n            currentCell.walls[0] = false\r\n            //so set the next cell top wall to false to remove it\r\n            nextCell.walls[2] = false\r\n        } else if (verticalDistance === -1) {\r\n            //current cell is below the next cell\r\n            //so set the current cell top wall to false to remove it\r\n            currentCell.walls[2] = false\r\n            //so set the next cell bottom wall to false to remove it\r\n            nextCell.walls[0] = false\r\n        }\r\n    }\r\n\r\n}\r\n","import React, { useEffect, ChangeEvent, useContext } from \"react\";\r\nimport { MazeGenerator } from \"../mazeGenComp/MazeGenerator\";\r\nimport p5 from \"p5\";\r\nimport { logger, loggerObj } from \"../utils/loggingUtils\";\r\nimport { storageUtils } from \"../utils/storageUtils\";\r\nimport { P5_MazeContext, p5_MazeContext } from \"../AppContext\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { RouterStore } from \"mobx-react-router\";\r\nimport { UiPreferencesStore } from \"../stores/UiPreferencesStore\";\r\nimport { logToConsole } from \"../shared/logger\";\r\nimport { MazeViewStore } from \"../stores/MazeViewStore\";\r\n\r\ninterface MazeContainerProps {\r\n  routerStore?: RouterStore;\r\n  // uiPreferencesStore?: UiPreferencesStore;\r\n  mazeViewStore?: MazeViewStore;\r\n}\r\n\r\nconst MazeContainer: React.FC<MazeContainerProps> = (\r\n  props: MazeContainerProps\r\n) => {\r\n  // const mazeContext = useContext({});\r\n  // let mazeOptions: MazeOptions;\r\n  // let mazeOptionsSetter: MazeOptionsSetter;\r\n  let sketchHandler: Function | any;\r\n  let mazeSketch: p5; // holde reference to the sketch\r\n  //set up window resize event\r\n  //bind window resize event handler\r\n  //SET UP SCENE CLASS _ TODO Move to that - WHERE the maze generator operates\r\n  //get the window dimension\r\n  // let controlsTopPadding = 100\r\n  // const mazeContainerRef = useRef(undefined);\r\n  \r\n\r\n  let mazeContext: P5_MazeContext = useContext(p5_MazeContext);\r\n  const { mazeOptions, p5_MazeFuncs } = mazeContext!;\r\n  let mazeContainer: HTMLElement | null;\r\n\r\n  const clearMaze = () => {\r\n    logToConsole(\"Clearing Maze\");\r\n    mazeSketch.remove();\r\n  };\r\n  //TODO Extract functions into context\r\n  const rerunMaze = () => {\r\n    logger(`Removing sketch.`);\r\n    clearMaze();\r\n    //destroy current sketch\r\n    logToConsole(\"Creating new sketch\");\r\n    createMazeSketch();\r\n  };\r\n\r\n  useEffect(() => {\r\n    mazeContainer = document.getElementById(\"maze-container\");\r\n\r\n    // //attch maze click\r\n    // mazeContainer!.addEventListener(\"click\", (event) =>  {\r\n    //   handleMazeContainerClick(event)\r\n    // });\r\n    attachEventHandlers();\r\n    createMazeSketch();\r\n    //TODO Only make this happen when you leave the route\r\n    return () => {\r\n      clearMaze();\r\n    };\r\n  });\r\n  let mazeIsActive = true;\r\n  const createMazeSketch = () => {\r\n    const { frameRate } = mazeOptions;\r\n    sketchHandler = (p: p5) =>\r\n      new MazeGenerator(\r\n        mazeIsActive,\r\n        frameRate,\r\n        p,\r\n        mazeOptions\r\n      );\r\n    logger(\"Maze Options:\");\r\n    loggerObj(mazeOptions);\r\n    if (mazeContainer) {\r\n      mazeSketch = new p5(sketchHandler, mazeContainer);\r\n      p5_MazeFuncs.resetMaze = () => {\r\n        rerunMaze();\r\n      };\r\n    }\r\n  };\r\n  // const clickHandler = () => (mazeIsActive = !mazeIsActive);\r\n  const attachEventHandlers = () => {\r\n    window.onresize = function(event: Event) {\r\n      logger(`\r\n        New Widow Width ${window.innerWidth}\r\n        New Window Height ${window.innerHeight}\r\n        `);\r\n      mazeOptions.windowWidth = window.innerWidth;\r\n      mazeOptions.windowHeight = window.innerHeight;\r\n      storageUtils.setMazeoptionsInStorage(mazeOptions);\r\n      rerunMaze();\r\n    };\r\n  };\r\n  return (\r\n    <div>\r\n      <div id=\"maze-container\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default inject(\r\n  \"routerStore\",\r\n  \"mazeViewStore\"\r\n)(observer(MazeContainer));\r\n","export interface UserDTO {\r\n    email: string;\r\n    name: string;\r\n    password: string;\r\n}\r\n\r\nexport  class UserDtoDefault implements UserDTO {\r\n    email: string;\r\n    name: string;\r\n    password: string;\r\n    constructor(){\r\n        this.email = \"\"\r\n        this.name = \"\"\r\n        this.password = \"\"\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { UserDtoDefault } from \"../../api/models/UserDTO\";\r\nimport { ButtonGroup, Button, ButtonProps, Container } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"& .MuiTextField-root\": {\r\n        margin: theme.spacing(1),\r\n        width: 200\r\n      }\r\n    }\r\n  })\r\n);\r\ninterface LoginFormProps {\r\n  onSubmit: (data: any) => Promise<void>;\r\n}\r\n// https://material-ui.com/components/text-fields/\r\nconst LoginForm: React.SFC<LoginFormProps> = (props: LoginFormProps) => {\r\n  const defaultUserFormData = new UserDtoDefault();\r\n  const [name, setName] = useState(defaultUserFormData.name);\r\n  const [email, setEmail] = useState(defaultUserFormData.email);\r\n  const [password, setPassword] = useState(defaultUserFormData.password);\r\n  const { onSubmit } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Container fixed>\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <div>\r\n          <TextField\r\n            id=\"outlined\"\r\n            label=\"Name\"\r\n            defaultValue={name}\r\n            variant=\"outlined\"\r\n            onChange={() => {\r\n              return { onChange: setName };\r\n            }}\r\n          />\r\n          <TextField\r\n            required\r\n            id=\"outlined-required\"\r\n            label=\"Email\"\r\n            defaultValue={email}\r\n            variant=\"outlined\"\r\n            onChange={() => {\r\n              return { onChange: setEmail };\r\n            }}\r\n          />\r\n          <TextField\r\n            required\r\n            //   id=\"outlined-required\"\r\n            id=\"outlined-password-input\"\r\n            //   label=\"Required\"\r\n            defaultValue={password}\r\n            variant=\"outlined\"\r\n            autoComplete=\"current-password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            onChange={() => {\r\n              return { onChange: password };\r\n            }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <ButtonGroup\r\n            {...buttonGroupProps}\r\n            color=\"primary\"\r\n            aria-label=\"outlined primary button group\"\r\n          >\r\n            <Button {...buttonProps}>Create Account</Button>\r\n            <Button {...buttonProps}>Forgot Password</Button>\r\n            <Button {...buttonProps} onSubmit={onSubmit}>\r\n              Login\r\n            </Button>\r\n          </ButtonGroup>\r\n        </div>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\nconst buttonGroupProps: any = {\r\n  orientation: \"vertical\"\r\n};\r\nconst buttonProps: ButtonProps = {\r\n  fullWidth: true,\r\n  color: \"primary\"\r\n};\r\n\r\nexport default LoginForm;\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const userFragment = gql`\r\n  fragment UserInfo on User {\r\n    id\r\n    email\r\n    type\r\n    ccLast4\r\n  }\r\n`;\r\n","import { gql } from \"apollo-boost\";\r\nimport { userFragment } from \"../fragments/userFragment\";\r\n\r\nexport const meQuery = gql`\r\n  query MeQuery {\r\n    me {\r\n      ...UserInfo\r\n    }\r\n  }\r\n\r\n  ${userFragment}\r\n`;\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\n//Apollo\r\nimport { Mutation } from \"react-apollo\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { userFragment } from \"../../graphql/fragments/userFragment\";\r\nimport { meQuery } from \"../../graphql/queries/me\";\r\nimport { LoginMutation, LoginMutationVariables } from \"../../schemaTypes\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { RouterStore } from \"mobx-react-router\";\r\nimport { APP_ROUTES } from \"../../utils/routeUtils\";\r\n\r\nconst loginMutation = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      ...UserInfo\r\n    }\r\n  }\r\n\r\n  ${userFragment}\r\n`;\r\n\r\ninterface LoginViewProps {\r\n  routerStore?: RouterStore;\r\n}\r\nexport class LoginView extends React.PureComponent<\r\n  RouteComponentProps<{}> & LoginViewProps\r\n> {\r\n  render() {\r\n    return (\r\n      <Mutation<LoginMutation, LoginMutationVariables>\r\n        update={(cache, { data }) => {\r\n          if (!data || !data.login) {\r\n            return;\r\n          }\r\n\r\n          cache.writeQuery({\r\n            query: meQuery,\r\n            data: { me: data.login }\r\n          });\r\n        }}\r\n        mutation={loginMutation}\r\n      >\r\n        {(mutate, { client }) => (\r\n          <LoginForm\r\n            onSubmit={async (data: any) => {\r\n              // optional reset cache\r\n              await client!.resetStore();\r\n              const response = await mutate({\r\n                variables: data\r\n              });\r\n              console.log(response);\r\n              this.props.routerStore!.history.push(`/${APP_ROUTES.ACCOUNT}`);\r\n            }}\r\n          />\r\n        )}\r\n      </Mutation>\r\n    );\r\n  }\r\n}\r\n\r\nexport default inject(\"routerStore\")(observer(LoginView));\r\n","// Warning: Experimental library, do not use in production environments.\r\nimport StackdriverErrorReporter from 'stackdriver-errors-js';\r\n\r\nexport const errorHandler = new StackdriverErrorReporter();\r\nerrorHandler.start({\r\n    // key: \"AIzaSyCeRpnuW1Jb4bRTuz7IOuHoSqTI1issr0I\",\r\n    // projectId: \"devenv-259801\",\r\n    key: \"AIzaSyBUk2SwrHzyW9d7blXrCv9TfuGTyaUWWt8\",\r\n    projectId: \"linen-rex-259801\",\r\n\r\n    // The following optional arguments can also be provided:\r\n\r\n    // service: myServiceName,\r\n    // Name of the service reporting the error, defaults to 'web'.\r\n\r\n    // version: myServiceVersion,\r\n    // Version identifier of the service reporting the error.\r\n\r\n    // reportUncaughtExceptions: false\r\n    // Set to false to prevent reporting unhandled exceptions.\r\n\r\n    // reportUnhandledPromiseRejections: false\r\n    // Set to false to prevent reporting unhandled promise rejections.\r\n\r\n    // disabled: true\r\n    // Set to true to not send error reports, this can be used when developing locally.\r\n\r\n    // context: {user: 'user1'}\r\n    // You can set the user later using setUser()\r\n});","import React from \"react\";\r\nimport { Route } from \"react-router\";\r\n\r\n//Views\r\nimport Home from \"./views/Home/Home\";\r\nimport MazeContainer from \"./views/MazeContainer\";\r\nimport LoginView from \"./views/Login/LoginView\";\r\n\r\n//\r\nimport { APP_ROUTES } from \"./utils/routeUtils\";\r\nimport { errorHandler } from \"./errorHandler\";\r\n\r\nconst accountRoute = `/${APP_ROUTES.ACCOUNT}`;\r\nconst loginRoute = `/${APP_ROUTES.LOGIN}`;\r\nconst mazeRoute = `/${APP_ROUTES.MAZE}`;\r\n\r\nexport function AppRoutes() {\r\n  return [\r\n    <Route key=\"\" exact path=\"/\" render={() => {\r\n      //TODO Add page logging for google analytics integration\r\n      errorHandler.report(\"Test\")\r\n      return <Home/>\r\n    }} />,\r\n    <Route key={mazeRoute} exact path={mazeRoute} component={MazeContainer} />,\r\n    <Route key={loginRoute} exact path={loginRoute} component={LoginView} />,\r\n    <Route key={accountRoute} exact path={accountRoute} component={Home} />\r\n  ];\r\n}\r\n","import React from \"react\";\r\nimport { Router, Switch } from \"react-router\";\r\nimport { Provider } from \"mobx-react\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { syncHistoryWithStore } from \"mobx-react-router\";\r\n\r\n//Shared views\r\nimport Header from \"./views/Header/Header\";\r\n// import Footer from \"./views/Footer\";\r\n\r\nimport { AppRoutes } from \"./AppRoutes\";\r\nimport { stores } from \"./stores\";\r\n\r\nconst broswerHistory = createBrowserHistory();\r\nconst history = syncHistoryWithStore(broswerHistory, stores.routerStore);\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Provider {...stores}>\r\n        <Router history={history}>\r\n          <Header />\r\n          <Switch>{AppRoutes()}</Switch>\r\n          {/* <Footer /> */}\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { stores } from \"./stores\";\r\nimport { Provider } from \"mobx-react\";\r\n\r\nimport ApolloClient from 'apollo-boost'\r\nimport { ApolloProvider } from \"react-apollo\";\r\n\r\n//Contexts\r\nimport {\r\n  P5_MazeContextInitialValue,\r\n  p5_MazeContext,\r\n  MazeOptionsUiContextInitialValue,\r\n  mazeOptionsUiContext\r\n} from \"./AppContext\";\r\nimport App from \"./App\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:4000/graphql\",\r\n  credentials: \"include\"\r\n});\r\n\r\nconst AppWrapper = () => {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <p5_MazeContext.Provider value={P5_MazeContextInitialValue}>\r\n        <mazeOptionsUiContext.Provider value={MazeOptionsUiContextInitialValue}>\r\n          <Provider {...stores}>\r\n            <App />\r\n          </Provider>\r\n        </mazeOptionsUiContext.Provider>\r\n      </p5_MazeContext.Provider>\r\n    </ApolloProvider>\r\n  );\r\n};\r\nexport default AppWrapper;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWrapper from './AppWrapper';\r\n\r\nReactDOM.render(<AppWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SelectedLink\":\"Header_SelectedLink__3fHL4\",\"NavLink\":\"Header_NavLink__2XedZ\"};"],"sourceRoot":""}